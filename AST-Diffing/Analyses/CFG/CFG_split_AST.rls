% This implemenation splits the merged AST in 2 seperate (left, right)
% Then the CFG is computed for each side
% This demands more memory but is easy, since only few rules have been refactored

@source AST[integer,string, string,string,string,integer, string] : load-csv("TargetAST.csv").
@declare SplitAST(string,integer, string,string,string,integer).
@declare MaxAST(integer).
@declare ASTBB(string,integer,integer, string,string,string,integer).

% set the root for each Method

Side("left", "left").
Side("target", "left").
Side("target", "right").
Side("right", "right").

SplitAST(?side2,?nr, ?type,?id,?val, ?parNr):-
    AST(?nr,?side,?type,?id,?val,?parNr,_),
    Side(?side,?side2).

BBHead(?side,?nr):-
    SplitAST(?side,?nr,"MethodDecl",_,_,_).

BBHead(?side, ?nr):-
    SplitAST(?side,?nr, "ClassDecl",_,_,_).


%-----------------------------%
% IF-Statements 

% Find the Condition of If-statement
IfCondition(?side, ?ifNr,#min(?condNr)):-
    SplitAST(?side,?ifNr,"IfStmt",_,_,_),  
    SplitAST(?side,?condNr,?cond,_,_,?ifNr).

% Find  Then &Else Branch
ThenElse(?side,?ifNr,?thenElseNr):-
    IfCondition(?side,?ifNr,?condNr),
    SplitAST(?side,?thenElseNr,_,_,_,?ifNr),
    ?thenElseNr > ?condNr.

% Add Then&Else as BBs
BBHead(?side,?thenElseNr):-
    ThenElse(?side,_,?thenElseNr).

% Find first statement after If-Tree
IfSucc(?side,?ifNr,#min(?succNr)):-
    SplitAST(?side,?ifNr,"IfStmt",_,_,?parNr),
    SplitAST(?side,?succNr,?succType, _,_, ?parNr),
    ?succNr > ?ifNr.

% Add a new BB after the If-Tree 
BBHead(?side,?succNr):-
    IfSucc(?side,_,?succNr).

% Connect If-Stmt with Then/Else branches (even though we dont know to which BB ?ifNr belongs)
DirectConnection(?side,?ifNr,?thenElseBB):-
    ThenElse(?side,?ifNr,?thenElseBB).

% Link then&else BBs to IfSucc
IndirectConnection(?side,?thenElseBB,?succBB):-
    IfSucc(?side,?ifNr,?succBB),
    ThenElse(?side,?ifNr,?thenElseBB).

%-----------------------------%
% While loops 
% -- assume that Condition is 1. child & While-Body is 2. child

% Find While-Condition
WhileCondition(?side,?whileNr, #min(?condNr)):-
    SplitAST(?side,?whileNr,?type,_,_,_),
    SplitAST(?side,?condNr,_,_,_,?whileNr),
    ?type = "WhileStmt".

% Find body of While-Tree
WhileBody(?side,?whileNr,?followNr):-
    WhileCondition(?side,?whileNr, ?condNr),
    SplitAST(?side,?followNr, _, _, _, ?whileNr),
    ?followNr > ?condNr.

% Add body of While-Tree as BB
BBHead(?side,?body):-
    WhileBody(?side,_,?body).

% Create connection between WhileStmt and the body
DirectConnection(?side, ?whileNr,?bodyNr):-
    WhileBody(?side,?whileNr, ?bodyNr).

% Find Successor of WhileStmt & WhileBody
WhileSucc(?side,?whileNr, #min(?succNr)):-
    WhileBody(?side,?whileNr, _),
    SplitAST(?side,?whileNr,_,_,_,?parNr),
    SplitAST(?side,?succNr,_,_,_,?parNr),
    ?succNr > ?whileNr.

BBHead(?side,?whileSucc):-
    WhileSucc(?side,_,?whileSucc).

% Create connection between WhileStmt and body
DirectConnection(?side,?whileNr,?bodyNr):-
    WhileBody(?side,?whileNr,?bodyNr).

% Add direct connection from WhileStmt to Successor
DirectConnection(?side,?whileNr, ?succNr):-
    WhileSucc(?side,?whileNr,?succNr).

% Add indirect connection from WhileBody to Successor
IndirectConnection(?side,?whileNr, ?succNr):-
    WhileBody(?side,?whileNr, ?bodyNr),
    WhileSucc(?side,?whileNr,?succNr).

%-----------------------------%
% For loops
% -- assume that the last child of For-statement is the body

% Find last child
ForBody(?side,?forNr, #max(?bodyNr)):-
    SplitAST(?side,?forNr,?type,_,_,_),
    ?type = "ForStmt",
    SplitAST(?side,?bodyNr,_, _, _, ?forNr).

% Find Successor of For-Tree
ForSucc(?side,?forNr, #min(?succNr)):-
    ForBody(?side,?forNr,_),
    SplitAST(?side,?forNr,_,_,_,?parNr),
    SplitAST(?side,?succNr,_,_,_,?parNr),
    ?succNr > ?forNr.

% Add For-Body as BB
BBHead(?side,?bodyNr):-
    ForBody(?side,_, ?bodyNr).

BBHead(?side,?forSucc):-
    ForSucc(?side,_,?forSucc).

% Create connection between ForStmt and the body
DirectConnection(?side,?forNr,?bodyNr):-
    ForBody(?side,?forNr, ?bodyNr).

% Create connection between ForStmt and successor
DirectConnection(?side,?forNr,?succNr):-
    ForSucc(?side,?forNr,?succNr).

% Create indirect connection between body and For-Succ
IndirectConnection(?side,?bodyBB,?succNr):-
    ForBody(?side,?forNr,?bodyBB),
    ForSucc(?side,?forNr,?succNr).

%-----------------------------%
% Assign a BB to each Statement (propagate BB information within single block)

% Initialise with BB-Leaders
LookupBB(?side,?BBnr,?BBnr):-
    BBHead(?side,?BBnr).
%now there are holes, so +1 doesnt work for successor
% Propagate the BB-Number to next line in same block

MaxAST(#max(?nr)):-
    SplitAST(?side,?nr,_,_,_,_).

% dirty fix bc. of bug
% https://github.com/knowsys/nemo/issues/448
Succ(0,1).
Succ(?a,?a +1):-
    Succ(_,?a),
    ~MaxAST(?a).

LastStmtBB(?side,?BB,#max(?nr)):-
    BBHead(?side,?BB),
    ASTBB(?side,?BB,?nr,_,_,_,_).



NextLineBB(?side,?BB,?nr1,?nr2):-
    Succ(?nr1,?nr2),
    ASTBB(?side,?BB,?nr1,_,_,_,_),
    ASTBB(?side,?BB,?nr2,_,_,_,_).

GapStartBB(?side,?BB,?nr1):-
    ASTBB(?side,?BB,?nr1,_,_,_,_),
    Succ(?nr1,?nr2),
    ~ASTBB(?side,_,?nr2,_,_,_,_),
    ASTBB(?side,?BB,?nr3,_,_,_,_),
    ?nr3 > ?nr1 .

GapEndBB(?side,?BB,?nr3):-
    ASTBB(?side,?BB,?nr1,_,_,_,_),
    Succ(?nr2,?nr3),
    ~ASTBB(?side,?BB,?nr2,_,_,_,_),
    ASTBB(?side,?BB,?nr3,_,_,_,_),
    ?nr3 > ?nr1 .

% Start: 10, 23; End: 15,25
NextLineBB(?side,?BB,?startNr,#min(?endNr)):-
    GapStartBB(?side,?BB,?startNr),
    GapEndBB(?side,?BB,?endNr),
    ?startNr < ?endNr.

LookupBB(?side,?BB,?nr2):-
    LookupBB(?side,?BB,?nr1),
    Succ(?nr1,?nr2),
    ~BBHead(?side,?nr2).

    %NextLineBB(?side,?BB,?nr1,?nr2).

% Fill in BB-numbers where we only used statement numbers
DirectConnectionBB(?side,?BB1,?BB2):-
    DirectConnection(?side,?nr1,?nr2),
    LookupBB(?side,?BB1,?nr1),
    LookupBB(?side,?BB2,?nr2).

% Fill in BB-numbers where we only used statement numbers
IndirectConnectionBB(?side,?BB1,?BB2):-
    IndirectConnection(?side,?nr1,?nr2),
    LookupBB(?side,?BB1,?nr1),
    LookupBB(?side,?BB2,?nr2).

% Create extended AST with BB numbers
ASTBB(?side,?BB,?nr,?type,?id,?lit,?par):-
    SplitAST(?side,?nr,?type,?id,?lit,?par),
    LookupBB(?side,?BB,?nr).

%TODO LookupBB durch <,> ersetzen wenn moeglich

%-----------------------------%
% Create CFG based on direct & indirect connections


% A direct connection is always included the CFG, because no other BB can be inbetween
CFG(?side,?BB1,?BB2):-
    DirectConnectionBB(?side,?BB1, ?BB2).

% Forward indirect connection to KNOWN BB-Successor
% Example: nested IfStatements
IndirectConnectionBB(?side,?BB2, ?BB3):-
    DirectConnectionBB(?side,?BB1,?BB2),
    IndirectConnectionBB(?side,?BB1,?BB3).

% Forward indirect connection to POSSIBLE BB-Successors
IndirectConnectionBB(?side,?BB2, ?BB3):-
    IndirectConnectionBB(?side,?BB1,?BB2),
    IndirectConnectionBB(?side,?BB1,?BB3),
    ?BB2 < ?BB3,
    ~DirectConnectionBB(?side,?BB1,_).

% Find the closest IndirectConnectionBB iff. no DirectConnection
CountIC(?side,?BB1, #min(?BB2)):-
    IndirectConnectionBB(?side,?BB1,?BB2),
    ~DirectConnectionBB(?side,?BB1,_).

% Add closest IndirectConnectionBB to CFG iff. no DirectConnection
CFG(?side,?BB1,?BB2):-
    CountIC(?side,?BB1,?BB2).

%-----------------------------%
% Save methodname for each BB

%save Root (Method start) of CFG
CFGRoot(?side,?class, ?method,?nr2):-
    SplitAST(?side,?nr1,"ClassDecl",?class,_,_),
    SplitAST(?side,?nr2,"MethodDecl",?method,_,_).

% Initialise relation
BBMethodHead(?side,?class,?method,?nr):-    
    CFGRoot(?side,?class, ?method,?nr).

% !! Assume that no inter-procedural connections are made
% Propagate methodname through CFG
BBMethodHead(?side,?class,?method,?BB2):-
    CFG(?side,?BB1,?BB2),
    BBMethodHead(?side,?class,?method,?BB1).

% subtree
Subtree(?side,?BB2,?subHeader,?subHeader):-
    ASTBB(?side,?BB1,?nr1,"Block",_,_,_),
    ASTBB(?side,?BB1,?nr2,"List",_,_,?nr1),
    ASTBB(?side,?BB2,?subHeader,_,_,_,?nr2).

Subtree(?side, ?BB, ?subHeader, ?subNr2):-
    Subtree(?side,?BB,?subHeader,?subNr1),
    ASTBB(?side,?BB,?subNr2,_,_,_,?subNr1).

%@output Subtree.
@output IfCondition.
%@output IfSucc.
%@output ThenElse.
%@output WhileBody.
@output WhileCondition.
%@output WhileSucc.
%@output ForBody.
%@output ForSucc.
%@output DirectConnection.
%@output IndirectConnection.
%@output DirectConnectionBB.
%@output CountIC.

@output NextLineBB.
%@output PossNextLineBB.
%@output MaxAST.
%@output Succ.
@output CFGRoot.
@output BBHead.
@output LookupBB.
@output CFG.
@output BBMethodHead.
@output ASTBB.
@output SplitAST.
@output GapEndBB.
@output GapStartBB.
@output LastStmtBB.
