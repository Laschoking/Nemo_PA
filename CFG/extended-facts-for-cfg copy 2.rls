@import AssignBinop :- tsv{resource="AssignBinop.facts", format=(string, int, string, string)} .
@import AssignCast :- tsv{resource="AssignCast.facts", format=(string, int, string, string, string, string)} .
@import AssignCastNull :- tsv{resource="AssignCastNull.facts", format=(string, int, string, string, string)} .
@import AssignCastNumConstant :- tsv{resource="AssignCastNumConstant.facts", format=(string, int, string, string, string, string)} .
@import AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.facts", format=(string, int, string, string, string, int)} .
@import AssignInstanceOf :- tsv{resource="AssignInstanceOf.facts", format=(string, int, string, string, string, string)} .
@import AssignLocal :- tsv{resource="AssignLocal.facts", format=(string, int, string, string, string)} .
@import AssignNull :- tsv{resource="AssignNull.facts", format=(string, int, string, string)} .
@import AssignNumConstant :- tsv{resource="AssignNumConstant.facts", format=(string, int, string, string, string)} .
@import AssignOperFrom :- tsv{resource="AssignOperFrom.facts", format=(string, int, string, string)} .
@import AssignOperFromConstant :- tsv{resource="AssignOperFromConstant.facts", format=(string, int, string, string)} .
@import AssignPhantomInvoke :- tsv{resource="AssignPhantomInvoke.facts", format=(string, int, string)} .
@import AssignReturnValue :- tsv{resource="AssignReturnValue.facts", format=(string, string)} .
@import AssignUnop :- tsv{resource="AssignUnop.facts", format=(string, int, string, string)} .
@import BootstrapParam :- tsv{resource="BootstrapParam.facts", format=(int, string, string)} .
@import BreakpointStmt :- tsv{resource="BreakpointStmt.facts", format=(string, int, string)} .
@import ClassArtifact :- tsv{resource="Class-Artifact.facts", format=(string, string, string, int)} .
@import ClassHeap :- tsv{resource="ClassHeap.facts", format=(string, string)} .
@import ClassModifier :- tsv{resource="ClassModifier.facts", format=(string, string)} .
@import ClassType :- tsv{resource="Method.facts", format=(string)} .
@import ComponentType :- tsv{resource="ArrayType.facts", format=(string, string)} .
@import DirectSuperclass :- tsv{resource="DirectSuperclass.facts", format=(string, string)} .
@import DirectSuperinterface :- tsv{resource="DirectSuperinterface.facts", format=(string, string)} .
@import DummyIfVar :- tsv{resource="DummyIfVar.facts", format=(string, string)} .
@import DynamicMethodInvocation :- tsv{resource="DynamicMethodInvocation.facts", format=(string, int, string, string, string, int, string,int, string)} .
@import DynamicMethodInvocation-ParamType :- tsv{resource="DynamicMethodInvocation-ParamType.facts", format=(string, int, string)} .
@import EmptyArray :- tsv{resource="EmptyArray.facts", format=(string)} .
@import EnterMonitor :- tsv{resource="EnterMonitor.facts", format=(string, int, string, string)} .
@import ExceptionHandler :- tsv{resource="ExceptionHandler.facts", format=(string, string, int, string, int, int)} .
@import ExceptionHandler-FormalParam :- tsv{resource="ExceptionHandler-FormalParam.facts", format=(string, string)} .
@import ExitMonitor :- tsv{resource="ExitMonitor.facts", format=(string, int, string, string)} .
@import Field :- tsv{resource="Field.facts", format=(string, string, string, string)} .
@import Field_Modifier :- tsv{resource="Field-Modifier.facts", format=(string, string)} .
@import FormalParam :- tsv{resource="FormalParam.facts", format=(int, string, string)} .
@import Goto :- tsv{resource="Goto.facts", format=(string, int, int, string)} .
@import If :- tsv{resource="If.facts", format=(string, int, int, string)} .
@import IfConstant :- tsv{resource="IfConstant.facts", format=(string, int, string)} .
@import IfVar :- tsv{resource="IfVar.facts", format=(string, int, string)} .
@import InterfaceType :- tsv{resource="InterfaceType.facts", format=(string)} .
@import LoadArrayIndex :- tsv{resource="LoadArrayIndex.facts", format=(string, int, string, string, string)} .
@import LoadInstanceField :- tsv{resource="LoadInstanceField.facts", format=(string, int, string, string, string, string)} .
@import LoadStaticField :- tsv{resource="LoadStaticField.facts", format=(string, int, string, string, string)} .
@import LookupSwitch :- tsv{resource="LookupSwitch.facts", format=(string, int, string, string)} .
@import LookupSwitch_Default :- tsv{resource="LookupSwitch-Default.facts", format=(string, int)} .
@import LookupSwitch_Target :- tsv{resource="LookupSwitch-Target.facts", format=(string, int, int)} .
@import Method :- tsv{resource="Method.facts", format=(string, string, string, string, string, string, int)} .
@import MethodHandleConstant :- tsv{resource="MethodHandleConstant.facts", format=(string, string, string, string, int)} .
@import MethodInvocation_Line :- tsv{resource="MethodInvocation-Line.facts", format=(string, int)} .
@import MethodTypeConstant :- tsv{resource="MethodTypeConstant.facts", format=(string, int, string, string)} .
@import MethodTypeConstantParam :- tsv{resource="MethodTypeConstantParam.facts", format=(string, int, string)} .
@import Method_DeclaresException :- tsv{resource="Method-DeclaresException.facts", format=(string, string)} .
@import Method_Modifier :- tsv{resource="Method-Modifier.facts", format=(string, string)} .
@import NativeLibEntryPoint :- tsv{resource="NativeLibEntryPoint.facts", format=(string, string, string)} .
@import NativeMethodId :- tsv{resource="NativeMethodId.facts", format=(string, string)} .
@import NativeMethodTypeCandidate :- tsv{resource="NativeMethodTypeCandidate.facts", format=(string, string, string, int)} .
@import NativeNameCandidate :- tsv{resource="NativeNameCandidate.facts", format=(string, string, string, int)} .
@import NativeReturnVar :- tsv{resource="NativeReturnVar.facts", format=(string, string)} .
@import NativeXRef :- tsv{resource="NativeXRef.facts", format=(string, string, string, int)} .
@import NormalHeap :- tsv{resource="NormalHeap.facts", format=(string, string)} .
@import OperatorAt :- tsv{resource="OperatorAt.facts", format=(string, string)} .
@import PolymorphicInvocation :- tsv{resource="PolymorphicInvocation.facts", format=(string, string)} .
@import Return :- tsv{resource="Return.facts", format=(string, int, string, string)} .
@import ReturnVoid :- tsv{resource="ReturnVoid.facts", format=(string, int, string)} .
@import SpecialMethodInvocation :- tsv{resource="SpecialMethodInvocation.facts", format=(string, int, string, string, string)} .
@import StaticMethodInvocation :- tsv{resource="StaticMethodInvocation.facts", format=(string, int, string, string)} .
@import StoreArrayIndex :- tsv{resource="StoreArrayIndex.facts", format=(string, int, string, string, string)} .
@import StoreInstanceField :- tsv{resource="StoreInstanceField.facts", format=(string, int, string, string, string, string)} .
@import StoreStaticField :- tsv{resource="StoreStaticField.facts", format=(string, int, string, string, string)} .
@import StringConstant :- tsv{resource="StringConstant.facts", format=(string)} .
@import StringRaw :- tsv{resource="StringRaw.facts", format=(string, string)} .
@import SuperMethodInvocation :- tsv{resource="SuperMethodInvocation.facts", format=(string, int, string, string, string)} .
@import TableSwitch :- tsv{resource="TableSwitch.facts", format=(string, int, string, string)} .
@import TableSwitch-Default :- tsv{resource="TableSwitch-Default.facts", format=(string, int)} .
@import TableSwitch-Target :- tsv{resource="TableSwitch-Target.facts", format=(string, int, int)} .
@import ThisVar :- tsv{resource="Method.facts", format=(string, string)} .
@import Throw :- tsv{resource="Throw.facts", format=(string, int, string, string)} .
@import ThrowNull :- tsv{resource="ThrowNull.facts", format=(string, int, string)} .
@import UnsupportedInstruction :- tsv{resource="UnsupportedInstruction.facts",format=(string,int,string)}.
@import VirtualMethodInvocation :- tsv{resource="VirtualMethodInvocation.facts",format=(string,int,string,string,string)}.




% extended Facts:


Switch_DefaultTarget(?instruction, ?target) :-
    TableSwitch_DefaultTarget(?instruction, ?target).

Switch_DefaultTarget(?instruction, ?target) :-
    LookupSwitch_Default(?instruction, ?target).




Switch_Target(?instruction, ?value, ?target) :-
    TableSwitch_Target(?instruction, ?value, ?target).

Switch_Target(?instruction, ?value, ?target) :-
    LookupSwitch_Target(?instruction, ?value, ?target).

isSwitch_Insn(?i) :- 
    isTableSwitch_Insn(?i).
    
isSwitch_Insn(?i) :-
    isLookupSwitch_Insn(?i).


isReturnInstruction(?i) :- 
    isReturnVoid_Insn(?i).

isReturnInstruction(?i) :-
    isReturnNonvoid_Insn(?i).


isAssignHeapAllocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Line(?instruction, ?linenumber),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
    AssignHeapAllocation(?instruction, ?index, ?heap, ?to, ?method, ?linenumber).

isAssignLocal_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
    AssignLocal(?instruction, ?index, ?from, ?to, ?method).


isAssignBinop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    AssignBinop(?instruction, ?index, ?to, ?method).

isAssignUnop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    AssignUnop(?instruction, ?index, ?to, ?method).

isAssignCast_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
    AssignCast(?instruction, ?index, ?from, ?to, ?type, ?method).

isAssignCastNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCastNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
    AssignCastNumConstant(?instruction, ?index, ?const, ?to, ?type, ?method).

isAssignCastNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
    AssignCastNull(?instruction, ?index, ?to, ?type, ?method).

isNumConstant(?const),
isAssignNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
    AssignNumConstant(?instruction, ?index, ?const, ?to, ?method).

isAssignNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
    AssignNull(?instruction, ?index, ?to, ?method).

isAssignInstanceOf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstanceOf_From(?instruction, ?from),
AssignInstanceOf_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
    AssignInstanceOf(?instruction, ?index, ?from, ?to, ?type, ?method).



isEnterMonitor_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
EnterMonitor_Var(?instruction, ?var) :-
    EnterMonitor(?instruction, ?index, ?var, ?method).

isExitMonitor_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
ExitMonitor_Var(?instruction, ?var) :-
    ExitMonitor(?instruction, ?index, ?var, ?method).



Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
    StaticMethodInvocation(?instruction, ?index, ?signature, ?method).

Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
    SpecialMethodInvocation(?instruction, ?index, ?signature, _, ?method).

Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
    VirtualMethodInvocation(?instruction, ?index, ?signature, _, ?method).

VirtualMethodInvocation(?invocation, ?signature, ?inmethod) :-
	isVirtualMethodInvocation_Insn(?invocation),
	Instruction_Method(?invocation, ?inmethod),
	MethodInvocation_Method(?invocation, ?signature).

isVirtualMethodInvocation_Insn(?instruction),
VirtualMethodInvocation_Base(?instruction, ?base) :-
  VirtualMethodInvocation(?instruction, _, ?signature, ?base, _),
  ~isOpaqueMethod(?signature).



Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature),
isSuperMethodInvocation_Insn(?instruction),
SuperMethodInvocation_Base(?instruction, ?base) :-
    SuperMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).

isDynamicMethodInvocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
DynamicMethodInvocation_Bootstrap(?instruction, ?bootSignature),
DynamicMethodInvocation_DynName(?instruction, ?dynName),
DynamicMethodInvocation_DynReturnType(?instruction, ?dynRetType),
DynamicMethodInvocation_DynParamTypes(?instruction, ?dynParamTypes),
DynamicMethodInvocation_HandleTag(?instruction, ?tag),
DynamicMethodInvocation_DynArity(?instruction, ?dynArity) :-
    DynamicMethodInvocation(?instruction, ?index, ?bootSignature, ?dynName, ?dynRetType, ?dynArity, ?dynParamTypes, ?tag, ?method).
  


isThrow_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Throw_Var(?instruction, ?var) :-
    Throw(?instruction, ?index, ?var, ?method).

isThrowNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
    ThrowNull(?instruction, ?index, ?method).

isExceptionHandler(?handler),
isInstruction(?handler),
Instruction_Index(?handler, ?index),
Instruction_Method(?handler, ?method),
ExceptionHandler_Method(?handler, ?method),
ExceptionHandler_Index(?handler, ?index),
ExceptionHandler_Type(?handler, ?type),
ExceptionHandler_Begin(?handler, ?begin),
ExceptionHandler_End(?handler, ?end) :-
    ExceptionHandler(?handler, ?method, ?index, ?type, ?begin, ?end).

isStoreInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from) :-
    StoreInstanceField(?instruction, ?index, ?from, ?base, ?signature, ?method).

isLoadInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to) :-
    LoadInstanceField(?instruction, ?index, ?to, ?base, ?signature, ?method).

isStoreStaticField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreStaticField_From(?instruction, ?from) :-
    StoreStaticField(?instruction, ?index, ?from, ?signature, ?method).

isLoadStaticField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadStaticField_To(?instruction, ?to) :-
    LoadStaticField(?instruction, ?index, ?to, ?signature, ?method).

isStoreArrayIndex_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
StoreArrayIndex_Base(?instruction, ?base),
StoreArrayIndex_From(?instruction, ?from) :-
    StoreArrayIndex(?instruction, ?index, ?from, ?base, ?method).

isLoadArrayIndex_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
LoadArrayIndex_Base(?instruction, ?base),
LoadArrayIndex_To(?instruction, ?to) :-
    LoadArrayIndex(?instruction, ?index, ?to, ?base, ?method).

isGoto_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Goto_Target(?instruction, ?to) :-
    Goto(?instruction, ?index, ?to, ?method).

isIf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
If_Target(?instruction, ?to) :-
    If(?instruction, ?index, ?to, ?method).

isTableSwitch_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Switch_Key(?instruction, ?key) :-
    TableSwitch(?instruction, ?index, ?key, ?method).

isLookupSwitch_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Switch_Key(?instruction, ?key) :-
    LookupSwitch(?instruction, ?index, ?key, ?method).

isReturnNonvoid_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
ReturnNonvoid_Var(?instruction, ?var) :-
    Return(?instruction, ?index, ?var, ?method).

isReturnVoid_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
    ReturnVoid(?instruction, ?index, ?method).

Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
    AssignPhantomInvoke(?instruction, ?index, ?method).

Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
    BreakpointStmt(?instruction, ?index, ?method).

Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
    UnsupportedInstruction(?instruction, ?index, ?method).


@export Instruction_Method :- tsv{resource="Instruction_Method.csv",format=(string, string)} .
@export Instruction_Index :- tsv{resource="Instruction_Index.csv",format=(string, int)} .
@export isReturnInstruction :- tsv{resource="isReturnInstruction.csv",format=(string)} .
@export isAssignLocal_Insn :- tsv{resource="isAssignLocal_Insn.csv",format=(string)} .
@export isThrow_Insn :- tsv{resource="isThrow_Insn.csv",format=(string)} .
@export isSwitch_Insn :- tsv{resource="isSwitch_Insn.csv",format=(string)} .
@export isGoto_Insn :- tsv{resource="isGoto_Insn.csv",format=(string)} .
@export ExceptionHandler_Method :- tsv{resource="ExceptionHandler_Method.csv",format=(string, string)} .
@export ExceptionHandler_Index :- tsv{resource="ExceptionHandler_Index.csv",format=(string, int)} .
@export Switch_Target :- tsv{resource="Switch_Target.csv",format=(string, int, int)} .
@export If_Target :- tsv{resource="If_Target.csv",format=(string, int)} .
@export Goto_Target :- tsv{resource="Goto_Target.csv",format=(string, int)} .
@export isInstruction :- tsv{resource="isInstruction.csv",format=(string)} .
@export isIf_Insn :- tsv{resource="isIf_Insn.csv",format=(string)} .
@export Switch_DefaultTarget :- tsv{resource="Switch_DefaultTarget.csv",format=(string, int)} .
@export AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.facts", format=(string, int, string, string, string, int)} .

@export AssignInstruction_To :- tsv{resource="AssignInstruction_To.csv",format=(string, string)} .

%@export AssignInstanceOf :- tsv{resource="AssignInstanceOf.facts", format=(string, int, string, string, string, string)} .
%@export AssignNull :- tsv{resource="AssignNull.facts", format=(string, int, string, string)} .
%@export AssignNumConstant :- tsv{resource="AssignNumConstant.facts", format=(string, int, string, string, string)} .
%@export AssignCastNull :- tsv{resource="AssignCastNull.facts", format=(string, int, string, string, string)} .
%@export AssignCastNumConstant :- tsv{resource="AssignCastNumConstant.facts", format=(string, int, string, string, string, string)} .
%@export AssignCast :- tsv{resource="AssignCast.facts", format=(string, int, string, string, string, string)} .
%@export AssignUnop :- tsv{resource="AssignUnop.facts", format=(string, int, string, string)} .
%@export AssignBinop :- tsv{resource="AssignBinop.facts", format=(string, int, string, string)} .
%@export AssignLocal :- tsv{resource="AssignLocal.facts", format=(string, int, string, string, string)} .
%@export AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.facts", format=(string, int, string, string, string, int)} .

