//"<sun.misc.ProxyGenerator: byte[] generateClassFile()>"
//"abstract"

// This program transforms the normal facts into an extended version (pre-computing)
// It is used f.e. by the Control Flow Analysis
.decl _ActualParam(?index:number, ?invocation:symbol, ?var:symbol)
.decl ActualParam(?index:number, ?invocation:symbol, ?var:symbol)
.decl AnnotationElement(?annotationKind:symbol, ?element:symbol, ?parentId:symbol, ?id:symbol, ?name:symbol, ?value1:symbol, ?value2:symbol)
.decl ApplicationAllocation(?allocation:symbol)
.decl ApplicationClass(?ref:symbol)
.decl _ApplicationClass(?type:symbol)
.decl ApplicationField(?field:symbol)
.decl ApplicationInvocation(?invocation:symbol)
.decl ApplicationMethod(?symbol:symbol)
.decl _ApplicationPackage(?package:symbol)
.decl ApplicationVar(?var:symbol)
.decl ArrayAllocation(?insn:symbol, ?pos:number, ?sizeVar:symbol)
.decl _ArrayAllocation(?instruction:symbol, ?pos:number, ?sizeVar:symbol)
.decl ArrayInsnIndex(?insn:symbol, ?index:symbol)
.decl _ArrayInsnIndex(?instruction:symbol, ?index:symbol)
.decl ArrayNumIndex(?insn:symbol, ?index:number)
.decl _ArrayNumIndex(?instruction:symbol, ?index:number)
.decl _ArrayType(?arrayType:symbol)
.decl AssignBinop(?instruction:symbol, ?index:number, ?to:symbol, ?inmethod:symbol)
.decl AssignCast_From(?insn:symbol, ?from:symbol)
.decl AssignCast(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol)
.decl AssignCastNull(?instruction:symbol, ?index:number, ?to:symbol, ?type:symbol, ?symbol:symbol)
.decl AssignCastNumConstant_Id(?insn:symbol, ?const:symbol)
.decl AssignCastNumConstant(?instruction:symbol, ?index:number, ?const:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol)
.decl AssignCast_Type(?insn:symbol, ?type:symbol)
//.decl AssignCast(?type:symbol, ?from:symbol, ?to:symbol, ?inmethod:symbol)
.decl AssignHeapAllocation_Heap(?insn:symbol, ?heap:symbol)
//.decl AssignHeapAllocation(?heap:symbol, ?to:symbol, ?inmethod:symbol)
.decl AssignHeapAllocation(?instruction:symbol, ?index:number, ?heap:symbol, ?to:symbol, ?inmethod:symbol, ?linenumber:number)
.decl AssignInstanceOf_From(?insn:symbol, ?from:symbol)
.decl AssignInstanceOf(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?type:symbol, ?inmethod:symbol)
.decl AssignInstanceOf_Type(?insn:symbol, ?type:symbol)
.decl AssignInstruction_To(?insn:symbol, ?to:symbol)
.decl AssignLocal_From(?insn:symbol, ?from:symbol)
.decl AssignLocal(?instruction:symbol, ?index:number, ?from:symbol, ?to:symbol, ?inmethod:symbol)
.decl _AssignNull(?instruction:symbol, ?index:number, ?to:symbol, ?symbol:symbol)
.decl AssignNull(?to:symbol, ?inmethod:symbol)
.decl AssignNumConstant_Id(?insn:symbol, ?const:symbol)
.decl AssignNumConstant(?instruction:symbol, ?index:number, ?const:symbol, ?to:symbol, ?inmethod:symbol)
.decl AssignOper_FromConstant(?insn:symbol, ?pos: number, ?fro:float)
.decl _AssignOperFromConstant(?instruction:symbol, ?pos: number, ?fro:float)
.decl AssignOper_From(?insn:symbol, ?pos:number, ?from:symbol)
.decl _AssignOperFrom(?instruction:symbol, ?pos: number, ?from:symbol)
.decl _AssignPhantomInvoke(?instruction:symbol, ?index:number, ?symbol:symbol)
.decl _AssignReturnValue(?invocation:symbol, ?to:symbol)
.decl AssignReturnValue(?invocation:symbol, ?to:symbol)
.decl AssignUnop(?instruction:symbol, ?index:number, ?to:symbol, ?inmethod:symbol)
.decl _BootstrapParam(?index:number, ?invocation:symbol, ?var:symbol)
.decl BootstrapParam(?index:number, ?invocation:symbol, ?var:symbol)
.decl _BreakpointStmt(?instruction:symbol, ?index:number, ?symbol:symbol)
.decl _ClassArtifact(?artifact:symbol, ?className:symbol, ?subArtifact:symbol, ?size:number)
.decl _ClassHeap(?id:symbol, ?instanceType:symbol)
.decl ClassHeap_InstanceType(?classHeap:symbol, ?instanceType:symbol)
.decl _ClassModifier(?modifier:symbol, ?class:symbol)
.decl ClassModifier(?mod:symbol, ?class:symbol)
.decl _ClassType(?class:symbol)
.decl _ComponentType(?arrayType:symbol, ?componentType:symbol)
.decl ComponentType(?arrayType:symbol, ?componentType:symbol)
.decl ConcreteClass(?ref:symbol)
.decl _DirectSuperclass(?class:symbol, ?superclass:symbol)
.decl DirectSuperclass(?class:symbol, ?superclass:symbol)
.decl _DirectSuperinterface(?class:symbol, ?interface:symbol)
.decl DirectSuperinterface(?ref:symbol, ?interface:symbol)
.decl DummyIf_Var(?insn:symbol, ?Var:symbol)
.decl _DummyIfVar(?instruction:symbol, ?var:symbol)
.decl DynamicMethodInvocation_Bootstrap(?invocation:symbol, ?bootSignature:symbol)
.decl DynamicMethodInvocation_DynArity(?invocation:symbol, ?dynArity:number)
.decl DynamicMethodInvocation_DynName(?invocation:symbol, ?dynName:symbol)
.decl _DynamicMethodInvocation_DynParamType(?invocation:symbol, ?idx:number, ?pType:symbol)
.decl DynamicMethodInvocation_DynParamTypes(?invocation:symbol, ?dynParamTypes:symbol)
.decl DynamicMethodInvocation_DynReturnType(?invocation:symbol, ?dynRetType:symbol)
.decl DynamicMethodInvocation_HandleTag(?instruction:symbol, ?tag:number)
.decl _DynamicMethodInvocation(?instruction:symbol, ?index:number, ?bootSignature:symbol, ?dynName:symbol, ?dynRetType:symbol, ?dynArity:number, ?dynParamTypes:symbol, ?tag:number, ?symbol:symbol)
.decl _EmptyArray(?id:symbol)
.decl _EnterMonitor(?instruction:symbol, ?index:number, ?var:symbol, ?symbol:symbol)
.decl EnterMonitor_Var(?insn:symbol, ?var:symbol)
.decl ExceptionHandler_Begin(?handler:symbol, ?index:number)
.decl ExceptionHandler_End(?handler:symbol, ?index:number)
.decl ExceptionHandler_FormalParam(?handler:symbol, ?var:symbol)
.decl _ExceptionHandler(?handler:symbol, ?symbol:symbol, ?index:number, ?type:symbol, ?begin:number, ?end:number)
.decl ExceptionHandler_Index(?handler:symbol, ?index:number)
.decl ExceptionHandler_Method(?handler:symbol, ?inmethod:symbol)
.decl _ExceptionHandler_Previous(?handler:symbol, ?previous:symbol)
.decl ExceptionHandler_Previous(?handler:symbol, ?previous:symbol)
.decl ExceptionHandler_Type(?handler:symbol, ?type:symbol)
.decl _ExitMonitor(?instruction:symbol, ?index:number, ?var:symbol, ?symbol:symbol)
.decl ExitMonitor_Var(?insn:symbol, ?var:symbol)
.decl Field_Annotation(?fld:symbol, ?annotation:symbol)
.decl Field_DeclaringType(?field:symbol, ?declaringClass:symbol)
.decl FieldInstruction_Signature(?insn:symbol, ?sign:symbol)
.decl _Field_Modifier(?modifier:symbol, ?field:symbol)
.decl Field_Modifier(?mod:symbol, ?field:symbol)
.decl _Field(?signature:symbol, ?declaringClass:symbol, ?simplename:symbol, ?type:symbol)
.decl Field_SimpleName(?field:symbol, ?simpleName:symbol)
.decl Field_Type(?field:symbol, ?type:symbol)
.decl _FormalParam(?index:number, ?symbol:symbol, ?var:symbol)
.decl FormalParam(?index:number, ?symbol:symbol, ?var:symbol)
.decl _Goto(?instruction:symbol, ?index:number, ?to:number, ?symbol:symbol)
.decl Goto_Target(?insn:symbol, ?index:number)
.decl HeapAllocation_EmptyArray(?heap:symbol)
.decl HeapAllocation_Null(?null:symbol)
.decl HeapAllocation_Type(?heap:symbol, ?type:symbol)
.decl If_Constant(?insn:symbol, ?pos: number, ?cons:number)
.decl _IfConstant(?instruction:symbol, ?pos:number, ?con:number)
.decl _If(?instruction:symbol, ?index:number, ?to:number, ?symbol:symbol)
.decl If_Target(?insn:symbol, ?index:number)
.decl If_Var(?insn:symbol, ?pos:number, ?var:symbol)
.decl _IfVar(?instruction:symbol, ?pos:number, ?var:symbol)
.decl Instruction_Index(?insn:symbol, ?index:number)
.decl Instruction_Line(?insn:symbol, ?index:number)
.decl Instruction_Method(?insn:symbol, ?inMethod:symbol)
.decl _InterfaceType(?interface:symbol)
.decl isAnnotation(?a:symbol)
.decl isArrayInstruction(?insn:symbol)
.decl isArrayType(?t:symbol)
.decl isAssignBinop_Insn(?insn:symbol)
.decl isAssignCast_Insn(?insn:symbol)
.decl isAssignCastNull_Insn(?insn:symbol)
.decl isAssignCastNumConstant_Insn(?insn:symbol)
.decl isAssignHeapAllocation_Insn(?insn:symbol)
.decl isAssignInstanceOf_Insn(?insn:symbol)
.decl isAssignInstruction(?insn:symbol)
.decl isAssignLocal_Insn(?insn:symbol)
.decl isAssignNull_Insn(?insn:symbol)
.decl isAssignNumConstant_Insn(?insn:symbol)
.decl isAssignOper_Insn(?insn:symbol)
.decl isAssignPhantomInvoke(?insn:symbol)
.decl isAssignUnop_Insn(?insn:symbol)
.decl isBreakpointStmt(?insn:symbol)
.decl isClassHeap(?h:symbol)
.decl isClassType(?t:symbol)
.decl isDynamicMethodInvocation_Insn(?insn:symbol)
.decl isEnterMonitor_Insn(?insn:symbol)
.decl isExceptionHandler(?handler:symbol)
.decl isExitMonitor_Insn(?insn:symbol)
.decl isField(?field:symbol)
.decl isFieldInstruction(?insn:symbol)
.decl isGoto_Insn(?insn:symbol)
.decl isHeapAllocation(?h:symbol)
.decl isIf_Insn(?insn:symbol)
.decl isInstruction(?insn:symbol)
.decl isInterfaceType(?t:symbol)
.decl isJVMDescriptor(?jvmd:symbol)
.decl isLoadArrayIndex_Insn(?insn:symbol)
.decl isLoadInstanceField_Insn(?insn:symbol)
.decl isLoadStaticField_Insn(?insn:symbol)
.decl isLookupSwitch_Insn(?insn:symbol)
.decl isMethodDescriptor(?md:symbol)
.decl isMethodHandleConstant(?h:symbol)
.decl isMethodInvocation(?insn:symbol)
.decl isMethod(?m:symbol)
.decl isMethodTypeConstant(?h:symbol)
.decl isModifier(?m:symbol)
.decl isMonitorInstruction(?insn:symbol)
.decl isNormalHeap(?h:symbol)
.decl isNullType(?t:symbol)
.decl isNumConstant(?n:symbol)
.decl isOpaqueInstruction(?insn:symbol)
.decl isOpaqueMethod(?m:symbol)
.decl isPrimitiveType(?t:symbol)
.decl isReferenceType(?t:symbol)
.decl isReturnInstruction(?insn:symbol)
.decl isReturnNonvoid_Insn(?insn:symbol)
.decl isReturnVoid_Insn(?insn:symbol)
.decl isSpecialMethodInvocation_Insn(?insn:symbol)
.decl isStaticMethodInvocation_Insn(?insn:symbol)
.decl isStoreArrayIndex_Insn(?insn:symbol)
.decl isStoreInstanceField_Insn(?insn:symbol)
.decl isStoreStaticField_Insn(?insn:symbol)
.decl isStringConstant(?h:symbol)
.decl isStringRaw(?id:symbol)
.decl isSuperMethodInvocation_Insn(?insn:symbol)
.decl isSwitch_Insn(?insn:symbol)
.decl isTableSwitch_Insn(?insn:symbol)
.decl isThrow_Insn(?insn:symbol)
.decl isThrowNull_Insn(?insn:symbol)
.decl isType(?t:symbol)
.decl isUnsupportedInstruction(?insn:symbol)
.decl isVar(v:symbol)
.decl isVirtualMethodInvocation_Insn(?insn:symbol)
.decl KeepClass(?c:symbol)
.decl KeepClassesWithMembers(?m:symbol)
.decl KeepClassMembers(?m:symbol)
.decl KeepMethod(?m:symbol)
.decl LoadArrayIndex_Base(?insn:symbol, ?var:symbol)
.decl LoadArrayIndex(?base:symbol, ?to:symbol, ?inmethod:symbol)
.decl _LoadArrayIndex(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?symbol:symbol)
.decl LoadArrayIndex_To(?insn:symbol, var:symbol)
.decl LoadInstanceField_Base(?insn:symbol, ?var:symbol)
.decl LoadInstanceField(?base:symbol, ?sig:symbol, ?to:symbol, ?inmethod:symbol)
.decl _LoadInstanceField(?instruction:symbol, ?index:number, ?to:symbol, ?base:symbol, ?signature:symbol, ?symbol:symbol)
.decl LoadInstanceField_To(?insn:symbol, ?var:symbol)
.decl _LoadStaticField(?instruction:symbol, ?index:number, ?to:symbol, ?signature:symbol, ?symbol:symbol)
.decl LoadStaticField(?sig:symbol, ?to:symbol, ?inmethod:symbol)
.decl LoadStaticField_To(?insn:symbol, ?var:symbol)
.decl _LookupSwitch_Default(?instruction:symbol, ?target:number)
.decl _LookupSwitch(?instruction:symbol, ?index:number, ?key:symbol, ?symbol:symbol)
.decl _LookupSwitch_Target(?instruction:symbol, ?value:number, ?target:number)
.decl MainClass(?class:symbol)
.decl MainMethodArgArrayContent(?heap:symbol)
.decl MainMethodArgArray(?heap:symbol)
.decl Method_Annotation(?symbol:symbol, ?annotation:symbol)
.decl Method_Arity(?symbol:symbol, ?arity:number)
.decl _Method_DeclaresException(?exceptionType:symbol, ?symbol:symbol)
.decl Method_DeclaresException(?exceptionType:symbol, ?symbol:symbol)
.decl Method_DeclaringType(?symbol:symbol, ?declaringType:symbol)
.decl Method_Descriptor(?symbol:symbol, ?descriptor:symbol)
.decl MethodHandleConstant_Arity(?heap:symbol, ?arity:number)
.decl _MethodHandleConstant(?id:symbol, ?symbol:symbol, ?retType:symbol, ?paramTypes:symbol, ?arity:number)
.decl MethodHandleConstant_Method(?heap:symbol, ?symbol:symbol)
.decl MethodHandleConstant_ParamTypes(?heap:symbol, ?paramTypes:symbol)
.decl MethodHandleConstant_ReturnType(?heap:symbol, ?retType:symbol)
.decl MethodInvocation_Base(?invocation:symbol, ?base:symbol)
.decl _MethodInvocation_Line(?instruction:symbol, line:number)
.decl MethodInvocation_Line(?invocation:symbol, ?line:number)
.decl MethodInvocation_Method(?invocation:symbol, ?signature:symbol)
.decl MethodInvocation_SimpleName(?invocation:symbol, ?simpleName:symbol)
.decl Method_JVMDescriptor(?symbol:symbol, ?descriptor:symbol)
.decl _Method_Modifier(?mod:symbol, ?symbol:symbol)
.decl Method_Modifier(?mod:symbol, ?symbol:symbol)
.decl Method_ParamTypes(?symbol:symbol, ?params:symbol)
.decl Method_ReturnType(?symbol:symbol, ?returnType:symbol)
.decl Method_SimpleName(?symbol:symbol, ?simpleName:symbol)
.decl _Method(?symbol:symbol, ?simplename:symbol, ?descriptor:symbol, ?declaringType:symbol, ?returnType:symbol, ?jvmDescriptor:symbol, ?arity:number)
.decl MethodTypeConstant_Arity(?heap:symbol, ?arity:number)
.decl _MethodTypeConstant(?id:symbol, ?arity:number, ?retType:symbol, ?paramTypes:symbol)
.decl _MethodTypeConstantParam(?id:symbol, ?idx:number, ?type:symbol)
.decl MethodTypeConstant_ParamTypes(?heap:symbol, ?paramTypes:symbol)
.decl MethodTypeConstant_ReturnType(?heap:symbol, ?retType:symbol)
.decl Modifier_abstract(?mod:symbol)
.decl Modifier_final(?mod:symbol)
.decl Modifier_private(?mod:symbol)
.decl Modifier_public(?mod:symbol)
.decl Modifier_static(?mod:symbol)
.decl _NativeLibEntryPoint(?lib:symbol, ?function:symbol, ?addr:symbol)
.decl _NativeMethodId(?javaMethod:symbol, ?nativeId:symbol)
.decl _NativeMethodTypeCandidate(?lib:symbol, ?function:symbol, ?descriptor:symbol, ?offset2:number)
.decl _NativeNameCandidate(?lib:symbol, ?function:symbol, ?name:symbol, ?offset1:number)
.decl _NativeReturnVar(?var:symbol, ?symbol:symbol)
.decl NativeReturnVar(?var:symbol, ?symbol:symbol)
.decl _NativeXRef(?string:symbol, ?lib:symbol, ?function:symbol, ?dataAddr:number)
.decl _NormalHeap(?id:symbol, ?type:symbol)
.decl NumConstantRaw(?const:symbol, ?type:symbol)
.decl _OperatorAt(?instruction:symbol, ?operator:symbol)
.decl OriginalHeapAllocation_Type(?heap:symbol, ?type:symbol)
.decl Param_Annotation(?symbol:symbol, ?index:number, ?annotation:symbol)
.decl PhantomBasedMethod(?m:symbol)
.decl PhantomMethod(?m:symbol)
.decl PhantomType(?t:symbol)
.decl _PolymorphicInvocation(?invocation:symbol, ?simpleName:symbol)
.decl Properties(?path:symbol, ?key:symbol, ?value:symbol)
.decl _Return(?instruction:symbol, ?index:number, ?var:symbol, ?symbol:symbol)
.decl ReturnNonvoid_Var(?return:symbol, ?var:symbol)
.decl ReturnVar(?var:symbol, ?symbol:symbol)
.decl _ReturnVoid(?instruction:symbol, ?index:number, ?symbol:symbol)
.decl RootCodeElement(?id:symbol)
.decl SpecialMethodInvocation_Base(?invocation:symbol, ?base:symbol)
.decl SpecialMethodInvocation_Descriptor(?invocation:symbol, ?descriptor:symbol)
.decl _SpecialMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?symbol:symbol)
.decl SpecialMethodInvocation_SimpleName(?invocation:symbol, ?simplename:symbol)
.decl StaticMethodInvocation_Descriptor(?invocation:symbol, ?descriptor:symbol)
.decl _StaticMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?symbol:symbol)
.decl StaticMethodInvocation(?invocation:symbol, ?signature:symbol, ?inmethod:symbol)
.decl StaticMethodInvocation_SimpleName(?invocation:symbol, ?simplename:symbol)
.decl StoreArrayIndex_Base(?insn:symbol, ?var:symbol)
.decl StoreArrayIndex_From(?insn:symbol, ?var:symbol)
.decl StoreArrayIndex(?from:symbol, ?base:symbol, ?inmethod:symbol)
.decl _StoreArrayIndex(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?symbol:symbol)
.decl StoreInstanceField_Base(?insn:symbol, ?var:symbol)
.decl StoreInstanceField_From(?insn:symbol, ?var:symbol)
.decl StoreInstanceField(?from:symbol, ?base:symbol, ?signature:symbol, ?inmethod:symbol)
.decl _StoreInstanceField(?instruction:symbol, ?index:number, ?from:symbol, ?base:symbol, ?signature:symbol, ?symbol:symbol)
.decl StoreStaticField_From(?insn:symbol, ?var:symbol)
.decl StoreStaticField(?from:symbol, ?signature:symbol, ?inmethod:symbol)
.decl _StoreStaticField(?instruction:symbol, ?index:number, ?from:symbol, ?signature:symbol, ?symbol:symbol)
.decl _StringConstant(?id:symbol)
.decl _StringRaw(?id:symbol, ?rawId:symbol)
.decl String_toRaw(?id:symbol, ?rawId:symbol)
.decl SuperMethodInvocation_Base(?invocation:symbol, ?base:symbol)
.decl SuperMethodInvocation_Descriptor(?invocation:symbol, ?descriptor:symbol)
.decl _SuperMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?symbol:symbol)
.decl SuperMethodInvocation(?invocation:symbol, ?signature:symbol, ?inmethod:symbol)
.decl SuperMethodInvocation_SimpleName(?invocation:symbol, ?simplename:symbol)
.decl Switch_DefaultTarget(?insn:symbol, ?index:number)
.decl Switch_Key(?insn:symbol, ?key:symbol)
.decl Switch_Target(?insn:symbol, ?value:number, ?index:number)
.decl _TableSwitch_Default(?instruction:symbol, ?target:number)
.decl _TableSwitch(?instruction:symbol, ?index:number, ?key:symbol, ?symbol:symbol)
.decl _TableSwitch_Target(?instruction:symbol, ?value:number, ?target:number)
.decl _ThisVar(?symbol:symbol, ?var:symbol)
.decl ThisVar(?symbol:symbol, ?var:symbol)
.decl Throw(?insn:symbol, ?var:symbol)
.decl _Throw(?instruction:symbol, ?index:number, ?var:symbol, ?symbol:symbol)
.decl _ThrowNull(?instruction:symbol, ?index:number, ?symbol:symbol)
.decl Throw_Var(?insn:symbol, ?var:symbol)
.decl Type_Annotation(?type:symbol, ?annotation:symbol)
.decl Type_boolean(?t:symbol)
.decl Type_byte(?t:symbol)
.decl Type_char(?t:symbol)
.decl Type_double(?t:symbol)
.decl Type_float(?t:symbol)
.decl Type_int(?t:symbol)
.decl Type_long(?t:symbol)
.decl Type_null(?t:symbol)
.decl Type_object(?t:symbol)
.decl Type_short(?t:symbol)
.decl Type_void(?t:symbol)
.decl _UnsupportedInstruction(?instruction:symbol, ?index:number, ?symbol:symbol)
.decl _Var_DeclaringMethod(?var:symbol, ?symbol:symbol)
.decl Var_DeclaringMethod(?var:symbol, ?symbol:symbol)
.decl _Var_SimpleName(?var:symbol, ?simplename:symbol)
.decl Var_SimpleName(?var:symbol, ?simplename:symbol)
.decl _Var_Type(?var:symbol, ?type:symbol)
.decl Var_Type(?var:symbol, ?type:symbol)
.decl VirtualMethodInvocation_Base(?invocation:symbol, ?base:symbol)
.decl VirtualMethodInvocation_Descriptor(?invocation:symbol, ?descriptor:symbol)
.decl _VirtualMethodInvocation(?instruction:symbol, ?index:number, ?signature:symbol, ?base:symbol, ?symbol:symbol)
.decl VirtualMethodInvocation(?invocation:symbol, ?signature:symbol, ?inmethod:symbol)
.decl VirtualMethodInvocation_SimpleName(?invocation:symbol, ?simplename:symbol)
.decl XMLNodeAttribute(?file:symbol, ?nodeId:symbol, ?index:symbol, ?localName:symbol, ?qName:symbol, ?value:symbol)
.decl XMLNodeData(?file:symbol, ?nodeId:symbol, ?data:symbol)
.decl XMLNode(?file:symbol, ?nodeId:symbol, ?parentNodeId:symbol, ?namespaceURI:symbol, ?localName:symbol, ?qName:symbol)

.input KeepMethod(filename="KeepMethod.facts")
.input KeepClassMembers(filename="KeepClassMembers.facts")
.input KeepClassesWithMembers(filename="KeepClassesWithMembers.facts")
.input KeepClass(filename="KeepClass.facts")
.input RootCodeElement(filename="RootCodeElement.facts")
.input _ClassType(filename="ClassType.facts")
.input _ArrayType(filename="ArrayType.facts")
.input _InterfaceType(filename="InterfaceType.facts")
.input _ComponentType(filename="ComponentType.facts")
.input _ActualParam(filename="ActualParam.facts")
.input _BootstrapParam(filename="BootstrapParam.facts")
.input _DirectSuperinterface(filename="DirectSuperinterface.facts")
.input _DirectSuperclass(filename="DirectSuperclass.facts")
.input _Field_Modifier(filename="Field-Modifier.facts")
.input _ClassModifier(filename="ClassModifier.facts")
.input _FormalParam(filename="FormalParam.facts")
.input _Method_DeclaresException(filename="Method-DeclaresException.facts")
.input _Method_Modifier(filename="Method-Modifier.facts")
.input _NativeReturnVar(filename="NativeReturnVar.facts")
.input _Var_Type(filename="Var-Type.facts")
.input _Var_DeclaringMethod(filename="Var-DeclaringMethod.facts")
.input _Var_SimpleName(filename="Var-SimpleName.facts")
.input _ApplicationClass(filename="ApplicationClass.facts")
.input _ApplicationPackage(filename="ApplicationPackage.facts")
.input _ThisVar(filename="ThisVar.facts")
.input _ExceptionHandler_Previous(filename="ExceptionHandler-Previous.facts")
.input _AssignReturnValue(filename="AssignReturnValue.facts")
.input Properties
.input _OperatorAt(filename="OperatorAt.facts")
.input MainClass
.input _ClassArtifact(filename="Class-Artifact.facts")
.input _NormalHeap(filename="NormalHeap.facts")
.input _StringConstant(filename="StringConstant.facts")
.input _StringRaw(filename="StringRaw.facts")
.input _ClassHeap(filename="ClassHeap.facts")
.input _MethodHandleConstant(filename="MethodHandleConstant.facts")
.input _MethodTypeConstant(filename="MethodTypeConstant.facts")
.input _MethodTypeConstantParam(filename="MethodTypeConstantParam.facts")
.input _NativeLibEntryPoint(filename="NativeLibEntryPoint.facts")
.input _NativeMethodTypeCandidate(filename="NativeMethodTypeCandidate.facts")
.input _NativeNameCandidate(filename="NativeNameCandidate.facts")
.input _NativeMethodId(filename="NativeMethodId.facts")
.input _NativeXRef(filename="NativeXRef.facts")
.input _EmptyArray(filename="EmptyArray.facts")
.input _ArrayAllocation(filename="ArrayAllocation.facts")
.input AssignHeapAllocation(filename="AssignHeapAllocation.facts")
.input AssignLocal(filename="AssignLocal.facts")
.input AssignBinop(filename="AssignBinop.facts")
.input AssignUnop(filename="AssignUnop.facts")
.input _AssignOperFrom(filename="AssignOperFrom.facts")
.input _AssignOperFromConstant(filename="AssignOperFromConstant.facts")
.input _IfConstant(filename="IfConstant.facts")
.input _IfVar(filename="IfVar.facts")
.input _DummyIfVar(filename="DummyIfVar.facts")
.input AssignCast(filename="AssignCast.facts")
.input AssignCastNumConstant(filename="AssignCastNumConstant.facts")
.input AssignCastNull(filename="AssignCastNull.facts")
.input AssignNumConstant(filename="AssignNumConstant.facts")
.input _AssignNull(filename="AssignNull.facts")
.input AssignInstanceOf(filename="AssignInstanceOf.facts")
.input _Field(filename="Field.facts")
.input _EnterMonitor(filename="EnterMonitor.facts")
.input _ExitMonitor(filename="ExitMonitor.facts")
.input _MethodInvocation_Line(filename="MethodInvocation-Line.facts")
.input _StaticMethodInvocation(filename="StaticMethodInvocation.facts")
.input _SpecialMethodInvocation(filename="SpecialMethodInvocation.facts")
.input _VirtualMethodInvocation(filename="VirtualMethodInvocation.facts")
.input _SuperMethodInvocation(filename="SuperMethodInvocation.facts")
.input _DynamicMethodInvocation(filename="DynamicMethodInvocation.facts")
.input _DynamicMethodInvocation_DynParamType(filename="DynamicMethodInvocation-ParamType.facts")
.input _PolymorphicInvocation(filename="PolymorphicInvocation.facts")
.input _Throw(filename="Throw.facts")
.input _ThrowNull(filename="ThrowNull.facts")
.input _ExceptionHandler(filename="ExceptionHandler.facts")
.input ExceptionHandler_FormalParam(filename="ExceptionHandler-FormalParam.facts")
.input _Method(filename="Method.facts")
.input _StoreInstanceField(filename="StoreInstanceField.facts")
.input _LoadInstanceField(filename="LoadInstanceField.facts")
.input _StoreStaticField(filename="StoreStaticField.facts")
.input _LoadStaticField(filename="LoadStaticField.facts")
.input _StoreArrayIndex(filename="StoreArrayIndex.facts")
.input _LoadArrayIndex(filename="LoadArrayIndex.facts")
.input _ArrayInsnIndex(filename="ArrayInsnIndex.facts")
.input _ArrayNumIndex(filename="ArrayNumIndex.facts")
.input _Goto(filename="Goto.facts")
.input _If(filename="If.facts")
.input _TableSwitch(filename="TableSwitch.facts")
.input _LookupSwitch(filename="LookupSwitch.facts")
.input _TableSwitch_Target(filename="TableSwitch-Target.facts")
.input _LookupSwitch_Target(filename="LookupSwitch-Target.facts")
.input _TableSwitch_Default(filename="TableSwitch-Default.facts")
.input _LookupSwitch_Default(filename="LookupSwitch-Default.facts")
.input _Return(filename="Return.facts")
.input _ReturnVoid(filename="ReturnVoid.facts")
.input _AssignPhantomInvoke(filename="AssignPhantomInvoke.facts")
.input _BreakpointStmt(filename="BreakpointStmt.facts")
.input _UnsupportedInstruction(filename="UnsupportedInstruction.facts")
.input Type_Annotation(filename="Type-Annotation.facts")
.input Method_Annotation(filename="Method-Annotation.facts")
.input Field_Annotation(filename="Field-Annotation.facts")
.input Param_Annotation(filename="Param-Annotation.facts")
.input AnnotationElement(filename="AnnotationElement.facts")
.input PhantomType(filename="PhantomType.facts")
.input PhantomMethod(filename="PhantomMethod.facts")
.input PhantomBasedMethod(filename="PhantomBasedMethod.facts")
.input NumConstantRaw(filename="NumConstantRaw.facts")
.input XMLNode(filename="XMLNode.facts")
.input XMLNodeAttribute(filename="XMLNodeAttribute.facts")
.input XMLNodeData(filename="XMLNodeData.facts")


Throw(?insn, ?var) :-
	isThrow_Insn(?insn),
	Throw_Var(?insn, ?var).

LoadInstanceField(?base, ?sig, ?to, ?inmethod) :-
	isLoadInstanceField_Insn(?insn),
	Instruction_Method(?insn, ?inmethod),
	LoadInstanceField_Base(?insn, ?base),
	FieldInstruction_Signature(?insn, ?sig),
	LoadInstanceField_To(?insn, ?to).

StoreInstanceField(?from, ?base, ?sig, ?inmethod) :-
	isStoreInstanceField_Insn(?insn),
	Instruction_Method(?insn, ?inmethod),
	StoreInstanceField_From(?insn, ?from),
	StoreInstanceField_Base(?insn, ?base),
	FieldInstruction_Signature(?insn, ?sig).

LoadStaticField(?sig, ?to, ?inmethod) :-
	isLoadStaticField_Insn(?insn),
	Instruction_Method(?insn, ?inmethod),
	FieldInstruction_Signature(?insn, ?sig),
	LoadStaticField_To(?insn, ?to).

StoreStaticField(?from, ?sig, ?inmethod) :-
	isStoreStaticField_Insn(?insn),
	Instruction_Method(?insn, ?inmethod),
	StoreStaticField_From(?insn, ?from),
	FieldInstruction_Signature(?insn, ?sig).

LoadArrayIndex(?base, ?to, ?inmethod) :-
	isLoadArrayIndex_Insn(?insn),
	Instruction_Method(?insn, ?inmethod),
	LoadArrayIndex_Base(?insn, ?base),
	LoadArrayIndex_To(?insn, ?to).

StoreArrayIndex(?from, ?base, ?inmethod) :-
	isStoreArrayIndex_Insn(?insn),
	Instruction_Method(?insn, ?inmethod),
	StoreArrayIndex_From(?insn, ?from),
	StoreArrayIndex_Base(?insn, ?base).


AssignNull(?to, ?inmethod) :-
	isAssignNull_Insn(?insn),
	AssignInstruction_To(?insn, ?to),
	Instruction_Method(?insn, ?inmethod).

//AssignHeapAllocation(?heap, ?to, ?inmethod) :-
//	isAssignHeapAllocation_Insn(?insn),
//	Instruction_Method(?insn, ?inmethod),
//	AssignHeapAllocation_Heap(?insn, ?heap),
//	AssignInstruction_To(?insn, ?to).

ReturnVar(?var, ?method) :-
	isReturnNonvoid_Insn(?insn),
	Instruction_Method(?insn, ?method),
	ReturnNonvoid_Var(?insn, ?var).

ReturnVar(?var, ?method) :-
	NativeReturnVar(?var, ?method).

VirtualMethodInvocation(?invocation, ?signature, ?inmethod) :-
	isVirtualMethodInvocation_Insn(?invocation),
	Instruction_Method(?invocation, ?inmethod),
	MethodInvocation_Method(?invocation, ?signature).

StaticMethodInvocation(?invocation, ?signature, ?inmethod) :-
	isStaticMethodInvocation_Insn(?invocation),
	Instruction_Method(?invocation, ?inmethod),
	MethodInvocation_Method(?invocation, ?signature).

SuperMethodInvocation(?invocation, ?signature, ?inmethod) :-
	isSuperMethodInvocation_Insn(?invocation),
	Instruction_Method(?invocation, ?inmethod),
	MethodInvocation_Method(?invocation, ?signature).

VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
VirtualMethodInvocation_Descriptor(?invocation, ?descriptor) :-
	isVirtualMethodInvocation_Insn(?invocation),
	MethodInvocation_Method(?invocation, ?signature),
	Method_SimpleName(?signature, ?simplename),
	Method_Descriptor(?signature, ?descriptor).

StaticMethodInvocation_SimpleName(?invocation, ?simplename),
StaticMethodInvocation_Descriptor(?invocation, ?descriptor) :-
	isStaticMethodInvocation_Insn(?invocation),
	MethodInvocation_Method(?invocation, ?signature),
	Method_SimpleName(?signature, ?simplename),
	Method_Descriptor(?signature, ?descriptor).

SpecialMethodInvocation_SimpleName(?invocation, ?simplename),
SpecialMethodInvocation_Descriptor(?invocation, ?descriptor) :-
	isSpecialMethodInvocation_Insn(?invocation),
	MethodInvocation_Method(?invocation, ?signature),
	Method_SimpleName(?signature, ?simplename),
	Method_Descriptor(?signature, ?descriptor).

SuperMethodInvocation_SimpleName(?invocation, ?simplename),
SuperMethodInvocation_Descriptor(?invocation, ?descriptor) :-
	isSuperMethodInvocation_Insn(?invocation),
	MethodInvocation_Method(?invocation, ?signature),
	Method_SimpleName(?signature, ?simplename),
	Method_Descriptor(?signature, ?descriptor).


MethodInvocation_SimpleName(?invocation, ?simplename) :-
	VirtualMethodInvocation_SimpleName(?invocation, ?simplename).
MethodInvocation_SimpleName(?invocation, ?simplename) :-
	SpecialMethodInvocation_SimpleName(?invocation, ?simplename).
MethodInvocation_SimpleName(?invocation, ?simplename) :-
	StaticMethodInvocation_SimpleName(?invocation, ?simplename).
MethodInvocation_SimpleName(?invocation, ?simplename) :-
	SuperMethodInvocation_SimpleName(?invocation, ?simplename).

isOpaqueInstruction(?instruction) :-
   _StaticMethodInvocation(?instruction, _, ?signature, _),
   isOpaqueMethod(?signature).
isOpaqueInstruction(?instruction) :-
   _SpecialMethodInvocation(?instruction, _, ?signature, _, _),
   isOpaqueMethod(?signature).
isOpaqueInstruction(?instruction) :-
   _VirtualMethodInvocation(?instruction, _, ?signature, _, _),
   isOpaqueMethod(?signature).
isOpaqueMethod(m) :- isMethod(m), m = "<sun.misc.ProxyGenerator: byte[] generateClassFile()>" .
isType(?t) :- isPrimitiveType(?t) ; isReferenceType(?t).

isReferenceType(?t) :-
  isNullType(?t) ; isArrayType(?t) ; isClassType(?t) ; isInterfaceType(?t) ; isAnnotation(?t).

isHeapAllocation(?h) :-
  isNormalHeap(?h) ; isStringConstant(?h) ; isClassHeap(?h) ; isMethodHandleConstant(?h) ; isMethodTypeConstant(?h).


isInstruction(?i) :-
  isThrow_Insn(?i) ; isGoto_Insn(?i) ; isIf_Insn(?i) ; isSwitch_Insn(?i) ; isMonitorInstruction(?i) ;
  isFieldInstruction(?i) ; isArrayInstruction(?i) ; isAssignInstruction(?i) ;
  isReturnInstruction(?i) ; isMethodInvocation(?i) ; isUnsupportedInstruction(?i).

isThrowNull_Insn(?i) :- isThrow_Insn(?i).

isSwitch_Insn(?i) :- isTableSwitch_Insn(?i) ; isLookupSwitch_Insn(?i).

isMonitorInstruction(?i) :- isEnterMonitor_Insn(?i) ; isExitMonitor_Insn(?i).

isFieldInstruction(?i) :-
  isLoadInstanceField_Insn(?i) ; isStoreInstanceField_Insn(?i) ;
  isLoadStaticField_Insn(?i) ; isStoreStaticField_Insn(?i).

isArrayInstruction(?i) :- isLoadArrayIndex_Insn(?i) ; isStoreArrayIndex_Insn(?i).

isAssignInstruction(?i) :-
  isAssignOper_Insn(?i) ; isAssignInstanceOf_Insn(?i) ; isAssignNull_Insn(?i) ;
  isAssignNumConstant_Insn(?i) ; isAssignCast_Insn(?i) ; isAssignHeapAllocation_Insn(?i).

isAssignOper_Insn(?i) :-
  isAssignBinop_Insn(?i) ; isAssignUnop_Insn(?i) ; isAssignLocal_Insn(?i).

isAssignCast_Insn(?i) :- isAssignCastNumConstant_Insn(?i) ; isAssignCastNull_Insn(?i).

isReturnInstruction(?i) :- isReturnVoid_Insn(?i) ; isReturnNonvoid_Insn(?i).

isMethodInvocation(?i) :-
  isVirtualMethodInvocation_Insn(?i) ; isSpecialMethodInvocation_Insn(?i) ; isStaticMethodInvocation_Insn(?i) ;
  isSuperMethodInvocation_Insn(?i) ; isDynamicMethodInvocation_Insn(?i).

isUnsupportedInstruction(?i) :- isAssignPhantomInvoke(?i) ; isBreakpointStmt(?i).


isClassType(?class) :- _ClassType(?class).

isArrayType(?arrayType) :- _ArrayType(?arrayType).

isInterfaceType(?interface) :- _InterfaceType(?interface).

isArrayType(?arrayType),
isType(?componentType),
ComponentType(?arrayType, ?componentType) :-
  _ComponentType(?arrayType, ?componentType).

isMethodInvocation(?invocation),
isVar(?var),
ActualParam(?index, ?invocation, ?var) :-
  _ActualParam(?index, ?invocation, ?var).


isDynamicMethodInvocation_Insn(?invocation),
isVar(?var),
BootstrapParam(?index, ?invocation, ?var) :-
  _BootstrapParam(?index, ?invocation, ?var).


isReferenceType(?class),
isInterfaceType(?interface),
DirectSuperinterface(?class, ?interface) :-
  _DirectSuperinterface(?class, ?interface).

isClassType(?class),
isClassType(?superclass),
DirectSuperclass(?class, ?superclass) :-
  _DirectSuperclass(?class, ?superclass).

isModifier(?modifier),
isField(?field),
Field_Modifier(?modifier, ?field) :-
  _Field_Modifier(?modifier, ?field).

ClassModifier(?modifier, ?class) :-
  _ClassModifier(?modifier, ?class).

isMethod(?method),
isVar(?var),
FormalParam(?index, ?method, ?var) :-
  _FormalParam(?index, ?method, ?var).

isReferenceType(?exceptionType),
isMethod(?method),
Method_DeclaresException(?exceptionType, ?method) :-
  _Method_DeclaresException(?exceptionType, ?method).

isModifier(?mod),
isMethod(?method),
Method_Modifier(?mod, ?method) :-
  _Method_Modifier(?mod, ?method).

isVar(?var),
isMethod(?method),
NativeReturnVar(?var, ?method) :-
  _NativeReturnVar(?var, ?method).

isVar(?var),
isType(?type),
Var_Type(?var, ?type) :-
  _Var_Type(?var, ?type).

isVar(?var),
isMethod(?method),
Var_DeclaringMethod(?var, ?method) :-
  _Var_DeclaringMethod(?var, ?method).

isVar(?var),
Var_SimpleName(?var, ?simplename) :-
  _Var_SimpleName(?var, ?simplename).

isReferenceType(?type),
ApplicationClass(?type) :-
  _ApplicationClass(?type).
  


isMethod(?method),
isVar(?var),
ThisVar(?method, ?var) :-
  _ThisVar(?method, ?var).

isExceptionHandler(?handler),
isExceptionHandler(?previous),
ExceptionHandler_Previous(?handler, ?previous) :-
  _ExceptionHandler_Previous(?handler, ?previous).

isMethodInvocation(?invocation),
isVar(?to),
AssignReturnValue(?invocation, ?to) :-
  _AssignReturnValue(?invocation, ?to).
  

MainClass(?b):-
  MainClass(?a),
  ?l1 = strlen(?a),
  ?l2 = strlen("Example"),
  ?b = substr(?a, ?l1 - ?l2, ?l2),
  match(".*Example",?a).



isType(?type),
isNormalHeap(?id),
OriginalHeapAllocation_Type(?id, ?type),
HeapAllocation_Type(?id, ?type) :-
  _NormalHeap(?id, ?type).

isClassType("java.lang.String").

isStringConstant(?id),
OriginalHeapAllocation_Type(?id, "java.lang.String"),
HeapAllocation_Type(?id, "java.lang.String") :-
  _StringConstant(?id).


isStringRaw(?id),
String_toRaw(?id, ?rawId) :-
  _StringRaw(?id, ?rawId).

isType(?instanceType),
isClassHeap(?id),
ClassHeap_InstanceType(?id, ?instanceType),
OriginalHeapAllocation_Type(?id, "java.lang.Class"),
HeapAllocation_Type(?id, "java.lang.Class") :-
  _ClassHeap(?id, ?instanceType).


isType("java.lang.invoke.MethodHandle").
isReferenceType("java.lang.invoke.MethodHandle").
isClassType("java.lang.invoke.MethodHandle").

isMethodHandleConstant(?id),
OriginalHeapAllocation_Type(?id, "java.lang.invoke.MethodHandle"),
MethodHandleConstant_Method(?id, ?method),
MethodHandleConstant_Arity(?id, ?arity),
MethodHandleConstant_ReturnType(?id, ?retType),
MethodHandleConstant_ParamTypes(?id, ?paramTypes),
HeapAllocation_Type(?id, "java.lang.invoke.MethodHandle") :-
  _MethodHandleConstant(?id, ?method, ?retType, ?paramTypes, ?arity).


isMethodTypeConstant(?id),
HeapAllocation_Type(?id, "java.lang.invoke.MethodType"),
MethodTypeConstant_Arity(?id, ?arity),
MethodTypeConstant_ReturnType(?id, ?retType),
MethodTypeConstant_ParamTypes(?id, ?paramTypes),
OriginalHeapAllocation_Type(?id, "java.lang.invoke.MethodType") :-
  _MethodTypeConstant(?id, ?arity, ?retType, ?paramTypes).



HeapAllocation_EmptyArray(?id) :-
  _EmptyArray(?id).


ArrayAllocation(?insn, ?pos, ?sizeVar) :-
  _ArrayAllocation(?insn, ?pos, ?sizeVar).

isAssignHeapAllocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Line(?instruction, ?linenumber),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
  AssignHeapAllocation(?instruction, ?index, ?heap, ?to, ?method, ?linenumber).

isAssignLocal_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  AssignLocal(?instruction, ?index, ?from, ?to, ?method).

isAssignBinop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
  AssignBinop(?instruction, ?index, ?to, ?method).

isAssignUnop_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
  AssignUnop(?instruction, ?index, ?to, ?method).

AssignOper_From(?instruction, ?pos, ?from) :-
  _AssignOperFrom(?instruction, ?pos, ?from).


AssignOper_FromConstant(?instruction, ?pos, ?from) :-
  _AssignOperFromConstant(?instruction, ?pos, ?from).


If_Constant(?instruction, ?pos, ?cons) :-
  _IfConstant(?instruction, ?pos, ?cons).

If_Var(?instruction, ?pos, ?var) :-
  _IfVar(?instruction, ?pos, ?var).


DummyIf_Var(?instruction, ?var) :-
  _DummyIfVar(?instruction, ?var).


isAssignCast_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  AssignCast(?instruction, ?index, ?from, ?to, ?type, ?method).

isAssignCastNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCastNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
  AssignCastNumConstant(?instruction, ?index, ?const, ?to, ?type, ?method).

isAssignCastNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
  AssignCastNull(?instruction, ?index, ?to, ?type, ?method).

isNumConstant(?const),
isAssignNumConstant_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignNumConstant_Id(?instruction, ?const),
AssignInstruction_To(?instruction, ?to) :-
  AssignNumConstant(?instruction, ?index, ?const, ?to, ?method).

isAssignNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to) :-
  _AssignNull(?instruction, ?index, ?to, ?method).

isAssignInstanceOf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
AssignInstanceOf_From(?instruction, ?from),
AssignInstanceOf_Type(?instruction, ?type),
AssignInstruction_To(?instruction, ?to) :-
  AssignInstanceOf(?instruction, ?index, ?from, ?to, ?type, ?method).

isField(?signature),
Field_DeclaringType(?signature, ?declaringType),
Field_SimpleName(?signature, ?simplename),
Field_Type(?signature, ?type) :-
  _Field(?signature, ?declaringType, ?simplename, ?type).


isEnterMonitor_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
EnterMonitor_Var(?instruction, ?var) :-
  _EnterMonitor(?instruction, ?index, ?var, ?method).

isExitMonitor_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
ExitMonitor_Var(?instruction, ?var) :-
  _ExitMonitor(?instruction, ?index, ?var, ?method).

isMethodInvocation(?instruction),
MethodInvocation_Line(?instruction, ?line) :-
  _MethodInvocation_Line(?instruction, ?line).

MethodInvocation_Base(?invocation, ?base) :-
  VirtualMethodInvocation_Base(?invocation, ?base).
MethodInvocation_Base(?invocation, ?base) :-
  SpecialMethodInvocation_Base(?invocation, ?base).

isMethod(?signature),
isMethodInvocation(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
  _StaticMethodInvocation(?instruction, ?index, ?signature, ?method).

isStaticMethodInvocation_Insn(?instruction) :-
  _StaticMethodInvocation(?instruction, _, ?signature, _),
  !isOpaqueMethod(?signature).


isMethod(?signature),
isMethodInvocation(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
  _SpecialMethodInvocation(?instruction, ?index, ?signature, _, ?method).

isSpecialMethodInvocation_Insn(?instruction),
SpecialMethodInvocation_Base(?instruction, ?base) :-
  _SpecialMethodInvocation(?instruction, _, ?signature, ?base, _),
  !isOpaqueMethod(?signature).


isMethod(?signature),
isMethodInvocation(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature) :-
  _VirtualMethodInvocation(?instruction, ?index, ?signature, _, ?method).

isVirtualMethodInvocation_Insn(?instruction),
VirtualMethodInvocation_Base(?instruction, ?base) :-
  _VirtualMethodInvocation(?instruction, _, ?signature, ?base, _),
  !isOpaqueMethod(?signature).


isMethod(?signature),
isMethodInvocation(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
MethodInvocation_Method(?instruction, ?signature),
isSuperMethodInvocation_Insn(?instruction),
SuperMethodInvocation_Base(?instruction, ?base) :-
  _SuperMethodInvocation(?instruction, ?index, ?signature, ?base, ?method).


isDynamicMethodInvocation_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
DynamicMethodInvocation_Bootstrap(?instruction, ?bootSignature),
DynamicMethodInvocation_DynName(?instruction, ?dynName),
DynamicMethodInvocation_DynReturnType(?instruction, ?dynRetType),
DynamicMethodInvocation_DynParamTypes(?instruction, ?dynParamTypes),
DynamicMethodInvocation_HandleTag(?instruction, ?tag),
DynamicMethodInvocation_DynArity(?instruction, ?dynArity) :-
  _DynamicMethodInvocation(?instruction, ?index, ?bootSignature, ?dynName, ?dynRetType, ?dynArity, ?dynParamTypes, ?tag, ?method).
  


isThrow_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Throw(?instruction, ?var),
Throw_Var(?instruction, ?var) :-
  _Throw(?instruction, ?index, ?var, ?method).

isThrowNull_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _ThrowNull(?instruction, ?index, ?method).

isExceptionHandler(?handler),
isInstruction(?handler),
Instruction_Index(?handler, ?index),
Instruction_Method(?handler, ?method),
ExceptionHandler_Method(?handler, ?method),
ExceptionHandler_Index(?handler, ?index),
ExceptionHandler_Type(?handler, ?type),
ExceptionHandler_Begin(?handler, ?begin),
ExceptionHandler_End(?handler, ?end) :-
  _ExceptionHandler(?handler, ?method, ?index, ?type, ?begin, ?end).

isMethod(?method),
isJVMDescriptor(?jvmDescriptor),
Method_SimpleName(?method, ?simplename),
Method_ParamTypes(?method, ?params),
Method_DeclaringType(?method, ?declaringType),
Method_JVMDescriptor(?method, ?jvmDescriptor),
Method_Arity(?method, ?arity),
Method_ReturnType(?method, ?returnType) :-
  _Method(?method, ?simplename, ?params, ?declaringType, ?returnType, ?jvmDescriptor, ?arity).

isMethodDescriptor(?descriptor),
Method_Descriptor(?method, ?descriptor) :-
  Method_ReturnType(?method, ?returnType),
  Method_ParamTypes(?method, ?params),
  ?descriptor = cat(?returnType, cat("(", cat(?params, ")"))).


isStoreInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from) :-
  _StoreInstanceField(?instruction, ?index, ?from, ?base, ?signature, ?method).

isLoadInstanceField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to) :-
  _LoadInstanceField(?instruction, ?index, ?to, ?base, ?signature, ?method).

isStoreStaticField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreStaticField_From(?instruction, ?from) :-
  _StoreStaticField(?instruction, ?index, ?from, ?signature, ?method).

isLoadStaticField_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadStaticField_To(?instruction, ?to) :-
  _LoadStaticField(?instruction, ?index, ?to, ?signature, ?method).

isStoreArrayIndex_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
StoreArrayIndex_Base(?instruction, ?base),
StoreArrayIndex_From(?instruction, ?from) :-
  _StoreArrayIndex(?instruction, ?index, ?from, ?base, ?method).

isLoadArrayIndex_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
LoadArrayIndex_Base(?instruction, ?base),
LoadArrayIndex_To(?instruction, ?to) :-
  _LoadArrayIndex(?instruction, ?index, ?to, ?base, ?method).

ArrayInsnIndex(?instruction, ?index) :-
  _ArrayInsnIndex(?instruction, ?index).

ArrayNumIndex(?instruction, ?index) :-
  _ArrayNumIndex(?instruction, ?index).

isGoto_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Goto_Target(?instruction, ?to) :-
  _Goto(?instruction, ?index, ?to, ?method).

isIf_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
If_Target(?instruction, ?to) :-
  _If(?instruction, ?index, ?to, ?method).

isTableSwitch_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Switch_Key(?instruction, ?key) :-
  _TableSwitch(?instruction, ?index, ?key, ?method).

isLookupSwitch_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
Switch_Key(?instruction, ?key) :-
  _LookupSwitch(?instruction, ?index, ?key, ?method).

Switch_Target(?instruction, ?value, ?target) :-
  _TableSwitch_Target(?instruction, ?value, ?target).

Switch_Target(?instruction, ?value, ?target) :-
  _LookupSwitch_Target(?instruction, ?value, ?target).


Switch_DefaultTarget(?instruction, ?target) :-
  _TableSwitch_Default(?instruction, ?target).

Switch_DefaultTarget(?instruction, ?target) :-
  _LookupSwitch_Default(?instruction, ?target).

isReturnNonvoid_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method),
ReturnNonvoid_Var(?instruction, ?var) :-
  _Return(?instruction, ?index, ?var, ?method).

isReturnVoid_Insn(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _ReturnVoid(?instruction, ?index, ?method).

isAssignPhantomInvoke(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _AssignPhantomInvoke(?instruction, ?index, ?method).

isBreakpointStmt(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _BreakpointStmt(?instruction, ?index, ?method).

isUnsupportedInstruction(?instruction),
Instruction_Index(?instruction, ?index),
Instruction_Method(?instruction, ?method) :-
  _UnsupportedInstruction(?instruction, ?index, ?method).


isModifier(?x), Modifier_abstract(?x) :- ?x = "abstract".
isModifier(?x), Modifier_public(?x) :- ?x = "public".
isModifier(?x), Modifier_private(?x) :- ?x = "private".
isModifier(?x), Modifier_final(?x) :- ?x = "final".
isModifier(?x), Modifier_static(?x) :- ?x = "static".


isPrimitiveType(?t), Type_boolean(?t) :- ?t = "boolean".
isPrimitiveType(?t), Type_byte(?t) :- ?t = "byte".
isPrimitiveType(?t), Type_char(?t) :- ?t = "char".
isPrimitiveType(?t), Type_short(?t) :- ?t = "short".
isPrimitiveType(?t), Type_int(?t) :- ?t = "int".
isPrimitiveType(?t), Type_long(?t) :- ?t = "long".
isPrimitiveType(?t), Type_float(?t) :- ?t = "float".
isPrimitiveType(?t), Type_double(?t) :- ?t = "double".
isPrimitiveType(?t), Type_void(?t) :- ?t = "void".

isNullType(?t), Type_null(?t) :- ?t = "null_type".

isClassType(?t), Type_object(?t) :- ?t = "java.lang.Object".


isAnnotation(?annotation) :- isReferenceType(?annotation), Type_Annotation(_, ?annotation).
isAnnotation(?annotation) :- isReferenceType(?annotation), Method_Annotation(_, ?annotation).
isAnnotation(?annotation) :- isReferenceType(?annotation), Field_Annotation(_, ?annotation).
isAnnotation(?annotation) :- isReferenceType(?annotation), Param_Annotation(_, _, ?annotation).


isHeapAllocation(?heap), isMethodHandleConstant(?heap), MethodHandleConstant_Method(?heap, ?method), HeapAllocation_Type(?heap, "java.lang.invoke.MethodHandle")  :-
  MethodHandleConstant_Method(?heap, ?method).

isHeapAllocation(?null), HeapAllocation_Type(?null, ?type) ,
HeapAllocation_Null(?null) :-
  ?null = "<<null pseudo heap>>",
  Type_null(?type).

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) ,
MainMethodArgArray(?heap) :-
  ?heap = "<<main method array>>",
  ?type = "java.lang.String[]".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type) ,
MainMethodArgArrayContent(?heap) :-
  ?heap = "<<main method array content>>",
  ?type = "java.lang.String".

ApplicationField(?field) :-
  Field_DeclaringType(?field, ?type),
  ApplicationClass(?type).

ApplicationMethod(?method) :-
  Method_DeclaringType(?method, ?class),
  ApplicationClass(?class).

ApplicationVar(?var) :-
  Var_DeclaringMethod(?var, ?method),
  ApplicationMethod(?method).

ApplicationInvocation(?invocation) :-
  isMethodInvocation(?invocation),
  Instruction_Method(?invocation, ?method),
  ApplicationMethod(?method).

ApplicationAllocation(?heap) :-
  isAssignHeapAllocation_Insn(?insn),
  Instruction_Method(?insn, ?method),
  ApplicationMethod(?method),
  AssignHeapAllocation_Heap(?insn, ?heap).

ConcreteClass(?class) :-
  isClassType(?class),
  !ClassModifier("abstract", ?class).
isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String[]/0",
  ?type = "java.lang.String[]".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<java.io.UnixFileSystem: java.lang.String[] list(java.io.File)>/new java.lang.String/0",
  ?type = "java.lang.String".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<sun.misc.Perf: java.nio.ByteBuffer createLong(java.lang.String,int,int,long)>/new java.nio.DirectByteBuffer/0",
  ?type = "java.nio.DirectByteBuffer".


isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<string-constant>>",
  ?type = "java.lang.String".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<reflection-string-constant>>",
  ?type = "java.lang.String".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<string-buffer>>",
  ?type = "java.lang.StringBuffer".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<string-builder>>",
  ?type = "java.lang.StringBuilder".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<system-thread-group>>",
  ?type = "java.lang.ThreadGroup".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<main-thread-group>>",
  ?type = "java.lang.ThreadGroup".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<main-thread>>",
  ?type = "java.lang.Thread".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<initial-context>>",
  ?type = "java.lang.Object".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<jvm-startup-context>>",
  ?type = "java.lang.Object".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<jvm-startup-hcontext>>",
  ?type = "java.lang.Object".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<clinit-context>>",
  ?type = "java.lang.Object".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<immutable-context>>",
  ?type = "java.lang.Object".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<immutable-hcontext>>",
  ?type = "java.lang.Object".

isHeapAllocation(?heap), HeapAllocation_Type(?heap, ?type)  :-
  ?heap = "<<immutable>>",
  ?type = "java.lang.Object".




//.output isOpaqueInstruction
//.output Instruction_Method
//.output Goto_Target
//.output If_Target
//.output isIf_Insn
//.output isThrow_Insn
//.output isGoto_Insn
//.output isSwitch_Insn
//.output Switch_DefaultTarget
//.output isInstruction
//.output isReturnInstruction
//
//.output Instruction_Method
//.output AssignInstruction_To
//.output isReturnInstruction
//.output isAssignLocal_Insn
//.output isThrow_Insn
//.output isSwitch_Insn
//.output isGoto_Insn
//.output ExceptionHandler_Method
//.output ExceptionHandler_Index
//.output Switch_Target
//.output If_Target
//.output Goto_Target
//.output isInstruction
//
//.output AssignHeapAllocation
//.output ClassModifier
//.output ComponentType
//.output ConcreteClass
//.output DirectSuperclass
//.output DirectSuperinterface
//.output ExceptionHandler_Begin
//.output ExceptionHandler_End
//.output ExceptionHandler_Previous
//.output ExceptionHandler_Type
//.output FormalParam
//.output HeapAllocation_Type
//.output isArrayType
//.output isClassType
//.output isExceptionHandler
//.output isInterfaceType
//.output isMethod
//.output isPrimitiveType
//.output isReferenceType
//.output isType
//.output MainClass
//.output Method_DeclaringType
//.output Method_Descriptor
//.output Method_JVMDescriptor
//.output Method_Modifier
//.output Method_ReturnType
//.output Method_SimpleName
//.output _NativeMethodId
//.output _NativeMethodTypeCandidate
//.output _NativeNameCandidate
//.output _NativeXRef
//.output SuperMethodInvocation
//.output SuperMethodInvocation_Base
//.output SuperMethodInvocation_Descriptor
//.output SuperMethodInvocation_SimpleName
//.output Type_byte
//.output Type_char
//.output Type_double
//.output Type_float
//.output Type_int
//.output Type_long
//.output Type_null
//.output Type_short
//.output _Var_Type
//.output Var_Type
//.output VirtualMethodInvocation
//.output VirtualMethodInvocation_Base
//.output VirtualMethodInvocation_Descriptor
//.output VirtualMethodInvocation_SimpleName
//
//
//.output Instruction_Method
//.output Instruction_Index
//
//
//.output AssignInstruction_To

//.output AssignInstanceOf
//.output AssignNull
//.output AssignNumConstant
//.output AssignCastNull
//.output AssignCastNumConstant
//.output AssignCast
//.output AssignUnop
//.output AssignBinop
//.output AssignLocal
//.output AssignHeapAllocation
//
//
//
//.output _ArrayType
//.output _ActualParam
//.output _Var_Type
//.output _Var_DeclaringMethod
//.output _Var_SimpleName
//.output _ApplicationClass
//.output _ApplicationPackage
//.output _ThisVar
//.output _ExceptionHandler_Previous
//.output _ArrayAllocation
//.output _ArrayInsnIndex
//.output Type_Annotation
//.output Method_Annotation
//.output Field_Annotation
//.output Param_Annotation
//.output AssignBinop
//.output AssignCast
//.output AssignCastNull
//.output AssignCastNumConstant
//.output AssignHeapAllocation
//.output AssignInstanceOf
//.output AssignLocal
//.output _AssignNull
//.output AssignNumConstant
//.output _AssignOperFrom
//.output _AssignOperFromConstant
//.output _AssignPhantomInvoke
//.output _AssignReturnValue
//.output AssignUnop
//.output _BootstrapParam
//.output _BreakpointStmt
//.output _ClassArtifact
//.output _ClassHeap
//.output _ClassModifier
//.output _ClassType
//.output _ComponentType
//.output _DirectSuperclass
//.output _DirectSuperinterface
//.output _DummyIfVar
//.output _DynamicMethodInvocation
//.output _EmptyArray
//.output _EnterMonitor
//.output _ExceptionHandler
//.output _ExitMonitor
//.output _Field
//.output _Field_Modifier
//.output _FormalParam
//.output _Goto
//.output _If
//.output _IfConstant
//.output _IfVar
//.output _InterfaceType
//.output _LoadArrayIndex
//.output _LoadInstanceField
//.output _LoadStaticField
//.output _LookupSwitch
//.output _LookupSwitch_Default
//.output _LookupSwitch_Target
//.output _Method
//.output _MethodHandleConstant
//.output _MethodInvocation_Line
//.output _MethodTypeConstant
//.output _MethodTypeConstantParam
//.output _Method_DeclaresException
//.output _Method_Modifier
//.output _NativeLibEntryPoint
//.output _NativeMethodId
//.output _NativeMethodTypeCandidate
//.output _NativeNameCandidate
//.output _NativeReturnVar
//.output _NativeXRef
//.output _NormalHeap
//.output _OperatorAt
//.output _Return
//.output _ReturnVoid
//.output _SpecialMethodInvocation
//.output _StaticMethodInvocation
//.output _StoreArrayIndex
//.output _StoreInstanceField
//.output _StoreStaticField
//.output _StringConstant
//.output _StringRaw
//.output _SuperMethodInvocation
//.output _TableSwitch
//.output _TableSwitch_Default
//.output _TableSwitch_Target
//.output _ThisVar
//.output _Throw
//.output _ThrowNull
//.output _UnsupportedInstruction
//.output _VirtualMethodInvocation



.decl Method_FirstInstruction(?method:symbol, ?insn:symbol)
.decl OptInstructionFromMethodIndex(?method:symbol, ?index:number, ?insn:symbol)
.decl Instruction_Next(?i:symbol, ?next:symbol)
.decl Instruction_Prev(?i:symbol, ?prev:symbol)
.decl JumpTarget(?insn:symbol, ?prev:symbol)
.decl IsJumpTarget(?insn:symbol)
.decl ExceptionHandlerFirstInstruction(?insn:symbol)
.decl FallThrough(?insn:symbol)
.decl BasicBlockBegin(?insn:symbol)
.decl BasicBlockHead(?insn:symbol, ?headInsn:symbol)
.decl BasicBlockTail(?headInsn:symbol, ?tailInsn:symbol)
.decl BasicBlockEnd(?insn:symbol)
.decl UnconditionalControlTransfer(?insn:symbol)
.decl MaySuccessorModuloThrow(?next:symbol, ?prev:symbol)
.decl MayPredecessorModuloThrow(?prev:symbol, ?next:symbol)
.decl MaySuccessorBBModuloThrow(?next:symbol, ?prev:symbol)
.decl MayPredecessorBBModuloThrow(?prev:symbol, ?next:symbol)
.decl Dominates(?dominator:symbol, ?insn:symbol)
.decl DominatesItsPredecessorInstruction(?prevInsn:symbol, ?insn:symbol)
.decl DominatesItsSuccessorInstruction(?insn:symbol, ?prevInsn:symbol)
.decl NextInSamePhiNode(?insn1:symbol, ?insn2:symbol)
.decl PhiNodeHead(?insn:symbol, ?headInsn:symbol)
.decl InstructionInPhiNode(?insn:symbol, ?headInsn:symbol)
.decl NextReturn(?insn1:symbol, ?insn2:symbol)
.decl NextInSameBasicBlock(?insn:symbol, ?next:symbol)
.decl PrevInSameBasicBlock(?insn:symbol, ?prev:symbol)
.decl CFGRoot(?insn:symbol, ?method:symbol)
.decl ExistsMayPredecessorBBModuloThrow(?insn:symbol)
.decl DoesNotDominate(?dominatorCandidate:symbol, ?insn:symbol)
.decl OptReturnInsn(?insn:symbol, ?method:symbol)
.decl HigherReturnIndex(?insn:symbol, ?indexHigher:number)
.decl NextReturnIndex(?returnInsn:symbol, ?nextReturnIndex:number)
.decl ExistsPreviousReturn(?insn:symbol)
.decl BBHeadInMethod(?insn:symbol, ?method:symbol)
.decl SameMethodBBHeads(?insn1:symbol, ?insn2:symbol)
.decl PredecessorBBsToSameBB(?insn:symbol, ?prev1:symbol, ?prev2:symbol)
.decl LargerPredecessorIndexToSameBB(?insn:symbol, ?indexLarge:number, ?prevSmall:symbol)
.decl NextPredecessorIndexToSameBB(?insn:symbol, ?prev:symbol, ?indexNext:number)
.decl NextPredecessorToSameBB(?insn:symbol, ?pred:symbol, ?nextPred:symbol)
.decl PreviousPredecessorToSameB(?insn:symbol, ?nextPred:symbol, ?prevPred:symbol)
.decl ExistsPreviousPredecessorToSameBB(?pred:symbol, ?insn:symbol)
.decl NonDomPredecessorBBsToSameBB(?insn:symbol, ?prev1:symbol, ?prev2:symbol) 
.decl LargerNonDomPredecessorIndexToSameBB(?insn:symbol, ?indexLarge:number, ?prevSmall:symbol)
.decl NextNonDomPredecessorIndexToSameBB(?insn:symbol, ?prev:symbol, ?indexNext:number)
.decl NextNonDomPredecessorToSameBB(?insn:symbol, ?pred:symbol, ?nextPred:symbol)
.decl PreviousNonDomPredecessorToSameBB(?insn:symbol, ?nextPred:symbol, ?prevPred:symbol) 
.decl ExistsPreviousNonDomPredecessorToSameBB(?pred:symbol, ?insn:symbol)



// Making explicit, so it can be negated.

// This is almost but not really a "may" relation for successor
// instructions. It does not include the targets of throw
// instructions. Hence the predicate name, meant to remind users that
// they should always check if the instruction is the beginning of
// an exception handler.

// Same concept for basic blocks. Reduces the cost significantly, since
// subsequent computation is quadratic.

// The Dominates relation is defined on basic blocks,
// represented by their first instruction (head). Defining
// a dense quadratic relation, like Dominates, on individual
// instructions was hugely expensive.

// To get to ?insn, we need to have gone through ?dominator

// ?insn dominates its predecessor. Must be head of basic block
// (head of a loop).

// A generally useful concept. Includes the case of both being in the
// same basic block.

// Phi Nodes Definition. If we have SSA input, then any multiple
// assignments to the same var are because of a Phi node. In fact,
// these will also be consecutive.


// Just inverting for efficiency.

// There may be multiple return instructions. This is a pain,
// since they also represent merges of control- and data-flow.
// We often need to define "forall" behavior over them.


//default implementation also includes exeception throws
// thus creating more thatn one FirstInstruction per Methode

Method_FirstInstruction(?method, ?insn) :-
   Instruction_Method(?insn, ?method),
   !Instruction_Prev(?insn, _),
   !IsJumpTarget(?insn),
   !_Throw(?insn, _, _, ?method).

OptInstructionFromMethodIndex(?method, ?index, ?insn) :-
   Instruction_Method(?insn, ?method),
   Instruction_Index(?insn, ?index).

Instruction_Next(?insn, ?next) :-
   Instruction_Method(?insn, ?inMethod),
   Instruction_Index(?insn, ?i),
   OptInstructionFromMethodIndex(?inMethod, ?i + 1, ?next).

Instruction_Prev(?insn, ?prev) :-
   Instruction_Method(?insn, ?inMethod),
   Instruction_Index(?insn, ?i),
   OptInstructionFromMethodIndex(?inMethod, ?i - 1, ?prev).

JumpTarget(?insn, ?goto) :-
   Goto_Target(?goto, ?targetIndex),
   Instruction_Method(?goto, ?gotoMethod),
   OptInstructionFromMethodIndex(?gotoMethod, ?targetIndex, ?insn).
JumpTarget(?insn, ?if) :-
   If_Target(?if, ?targetIndex),
   Instruction_Method(?if, ?method),
   OptInstructionFromMethodIndex(?method, ?targetIndex, ?insn).
JumpTarget(?insn, ?sw) :-
   (Switch_Target(?sw, _, ?targetIndex) ; Switch_DefaultTarget(?sw, ?targetIndex)),
   Instruction_Method(?sw, ?method),
   OptInstructionFromMethodIndex(?method, ?targetIndex, ?insn).

IsJumpTarget(?insn) :-
   JumpTarget(?insn, _).

ExceptionHandlerFirstInstruction(?insn) :-
   ExceptionHandler_Index(?handler, ?index),
   ExceptionHandler_Method(?handler, ?method),
   OptInstructionFromMethodIndex(?method, ?index, ?insn).

FallThrough(?insn) :-
   isIf_Insn(?if),
   Instruction_Next(?if, ?insn).
// REVIEW: The next two shouldn't matter much since without a label the
// fallthrough instruction would be dead code OR the beginning of an
// exception handler. The latter is handled specially. For the former, we
// consider such dead code to start a new BB, so that it doesn't accidentally
// get considered a continuation of the previous BB.
FallThrough(?insn) :-
   isReturnInstruction(?ret),
   Instruction_Next(?ret, ?insn).
FallThrough(?insn) :-
   isThrow_Insn(?throw),
   Instruction_Next(?throw, ?insn).


// First instruction of a method is a basic block beginning
BasicBlockBegin(?insn) :-
   OptInstructionFromMethodIndex(_, 1, ?insn).
BasicBlockBegin(?insn) :-
   ExceptionHandlerFirstInstruction(?insn).
BasicBlockBegin(?insn) :-
   JumpTarget(?insn, _).
BasicBlockBegin(?insn) :-
   FallThrough(?insn).

NextInSameBasicBlock(?insn, ?next) :-
   Instruction_Next(?insn, ?next),
   !BasicBlockBegin(?next).

PrevInSameBasicBlock(?insn, ?prev) :-
   NextInSameBasicBlock(?prev, ?insn).

BasicBlockHead(?insn, ?insn) :-
   BasicBlockBegin(?insn).
BasicBlockHead(?insn, ?headInsn) :-
   BasicBlockHead(?prev, ?headInsn),
   NextInSameBasicBlock(?prev, ?insn).

BasicBlockTail(?headInsn, ?tailInsn) :-
   BasicBlockHead(?tailInsn, ?headInsn),
   !NextInSameBasicBlock(?tailInsn, _).

BasicBlockEnd(?insn) :- BasicBlockTail(_, ?insn).

UnconditionalControlTransfer(?insn) :-
   isGoto_Insn(?insn) ;
   isSwitch_Insn(?insn) ;
   isReturnInstruction(?insn) ;
   isThrow_Insn(?insn).

MaySuccessorModuloThrow(?next, ?prev) :-
   JumpTarget(?next, ?prev).
MaySuccessorModuloThrow(?next, ?insn) :-
   Instruction_Next(?insn, ?next),
   !UnconditionalControlTransfer(?insn).

MayPredecessorModuloThrow(?prev, ?next) :-
   MaySuccessorModuloThrow(?next, ?prev).

MaySuccessorBBModuloThrow(?next, ?prev) :-
   MaySuccessorModuloThrow(?next, ?prevEnd),
   BasicBlockEnd(?prevEnd),
   BasicBlockBegin(?next),
   BasicBlockHead(?prevEnd, ?prev).

MayPredecessorBBModuloThrow(?prev, ?next) :-
   MaySuccessorBBModuloThrow(?next, ?prev).

// The Dominates relation is defined on basic blocks,
// represented by their first instruction (head). Defining
// a dense quadratic relation, like Dominates, on individual
// instructions was hugely expensive.

// Dominates(?dominator, ?insn): To get to ?insn, we need to have gone
// through ?dominator
Dominates(?dominator, ?insn) :-
   SameMethodBBHeads(?dominator, ?insn),
   !DoesNotDominate(?dominator, ?insn).

// Either the first instruction...
CFGRoot(?insn, ?method) :-
   OptInstructionFromMethodIndex(?method, 1, ?insn).
// or... could also be beginning of exception handler
CFGRoot(?insn, ?method) :-
   BBHeadInMethod(?insn, ?method),
   !(MayPredecessorBBModuloThrow(_, ?insn)).

ExistsMayPredecessorBBModuloThrow(?insn) :-
   MayPredecessorBBModuloThrow(_, ?insn).

// DoesNotDominate(?dominatorCandidate, ?insn): ?insn (which is a
// basic block head) is NOT dominated by ?dominatorCandidate
DoesNotDominate(?dominatorCandidate, ?insn) :-
   BBHeadInMethod(?dominatorCandidate, ?method),
   CFGRoot(?insn, ?method),
   ?dominatorCandidate != ?insn.

DoesNotDominate(?dominatorCandidate, ?insn) :-
   DoesNotDominate(?dominatorCandidate, ?otherInsn),
   MaySuccessorBBModuloThrow(?insn, ?otherInsn),
   ?insn != ?dominatorCandidate.


// ?insn dominates its predecessor. ?insn must be the head of a basic
// block (head of a loop).
DominatesItsPredecessorInstruction(?prevInsn, ?insn) :-
   JumpTarget(?insn, ?prevInsn),
   BasicBlockHead(?prevInsn, ?prevInsnHead),
   (?insn = ?prevInsnHead;
    Dominates(?insn, ?prevInsnHead)).

// KF: Currently this rules is not being used at all.
// // Includes the case of both being in the same basic block.
// DominatesItsSuccessorInstruction(?insn, ?prevInsn) :-
//    MaySuccessorModuloThrow(?insn, ?prevInsn),
//    BasicBlockHead[?prevInsn] = ?prevInsnHead,
//    BasicBlockHead[?insn] = ?insnHead,
//    (?insnHead = ?prevInsnHead;
//     Dominates(?prevInsnHead, ?insnHead)).


NextInSamePhiNode(?insn, ?nextInsn) :-
   isAssignLocal_Insn(?insn),
   AssignInstruction_To(?insn, ?var),
   Instruction_Next(?insn, ?nextInsn),
   isAssignLocal_Insn(?nextInsn),
   AssignInstruction_To(?nextInsn, ?var).

PhiNodeHead(?nextInsn, ?insn),
PhiNodeHead(?insn, ?insn) :-
   NextInSamePhiNode(?insn, ?nextInsn),
   Instruction_Prev(?insn, ?prevInsn),
   !NextInSamePhiNode(?prevInsn, ?insn).

PhiNodeHead(?nextInsn, ?insn),
PhiNodeHead(?insn, ?insn) :-
   NextInSamePhiNode(?insn, ?nextInsn),
   !Instruction_Prev(?insn, _).

PhiNodeHead(?nextInsn, ?headInsn) :-
   PhiNodeHead(?phiInsn, ?headInsn),
   NextInSamePhiNode(?phiInsn, ?nextInsn).

// Just inverting for efficiency.
InstructionInPhiNode(?insn, ?headInsn) :-
   PhiNodeHead(?insn, ?headInsn).


/// auxiliary quick-and-dirty predicates
OptReturnInsn(?insn, ?method) :-
   isReturnInstruction(?insn),
   Instruction_Method(?insn, ?method).

HigherReturnIndex(?insn, ?indexHigher) :-
   OptReturnInsn(?insn, ?method),
   OptReturnInsn(?insnHigher, ?method),
   Instruction_Index(?insnHigher, ?indexHigher),
   Instruction_Index(?insn, ?index),
   ?index < ?indexHigher.

NextReturnIndex(?returnInsn, ?nextReturnIndex) :-
   isInstruction(?returnInsn), 
   ?nextReturnIndex = min ?index : HigherReturnIndex(?returnInsn, ?index).

NextReturn(?returnInsn, ?nextReturnInsn) :-
   NextReturnIndex(?returnInsn, ?nextReturnIndex),
   Instruction_Method(?returnInsn, ?meth),
   OptInstructionFromMethodIndex(?meth, ?nextReturnIndex, ?nextReturnInsn).

ExistsPreviousReturn(?insn) :-
   NextReturn(_, ?insn).

BBHeadInMethod(?insn, ?method) :-
   BasicBlockBegin(?insn),
   Instruction_Method(?insn, ?method).

SameMethodBBHeads(?insn1, ?insn2) :-
   BBHeadInMethod(?insn1, ?method),
   BBHeadInMethod(?insn2, ?method).

// Auxiliaries...

// Quadratic, but doesn't matter, since it's so local and only
// defined on basic blocks.
PredecessorBBsToSameBB(?insn, ?prev1, ?prev2) :-
   MayPredecessorBBModuloThrow(?prev1, ?insn),
   MayPredecessorBBModuloThrow(?prev2, ?insn),
   ?prev1 != ?prev2.

LargerPredecessorIndexToSameBB(?insn, ?indexLarge, ?prevSmall) :-
   PredecessorBBsToSameBB(?insn, ?prevLarge, ?prevSmall),
   Instruction_Index(?prevLarge, ?indexLarge),
   Instruction_Index(?prevSmall, ?indexSmall),
   ?indexLarge > ?indexSmall.

.output NextPredecessorIndexToSameBB
NextPredecessorIndexToSameBB(?insn, ?prev, ?indexNext) :-
   LargerPredecessorIndexToSameBB(?insn, _, ?prev),
   ?indexNext = min ?index : LargerPredecessorIndexToSameBB(?insn, ?index, ?prev).

NextPredecessorToSameBB(?insn, ?pred, ?nextPred) :-
   NextPredecessorIndexToSameBB(?insn, ?pred, ?indexNext),
   Instruction_Method(?insn, ?method),
   OptInstructionFromMethodIndex(?method, ?indexNext, ?nextPred).

PreviousPredecessorToSameB(?insn, ?nextPred, ?prevPred) :-
   NextPredecessorToSameBB(?insn, ?prevPred, ?nextPred).

ExistsPreviousPredecessorToSameBB(?pred, ?insn) :-
   NextPredecessorToSameBB(?insn, _, ?pred).


// Same concepts as above, but for non-dominated (shortened to "NonDom")
// predecessors
NonDomPredecessorBBsToSameBB(?insn, ?prev1, ?prev2) :-   
   MayPredecessorBBModuloThrow(?prev1, ?insn),
   MayPredecessorBBModuloThrow(?prev2, ?insn),
   BasicBlockTail(?prev1, ?prevTail1),
   BasicBlockTail(?prev2, ?prevTail2),
   !DominatesItsPredecessorInstruction(?prevTail1, ?insn),
   !DominatesItsPredecessorInstruction(?prevTail2, ?insn),
   ?prev1 != ?prev2.

LargerNonDomPredecessorIndexToSameBB(?insn, ?indexLarge, ?prevSmall) :-
   NonDomPredecessorBBsToSameBB(?insn, ?prevLarge, ?prevSmall),
   Instruction_Index(?prevLarge, ?indexLarge),
   Instruction_Index(?prevSmall, ?indexSmall),
   ?indexLarge > ?indexSmall.

.output NextNonDomPredecessorIndexToSameBB
NextNonDomPredecessorIndexToSameBB(?insn, ?prev, ?indexNext) :-
   LargerNonDomPredecessorIndexToSameBB(?insn, _, ?prev),
   ?indexNext = min ?index : LargerNonDomPredecessorIndexToSameBB(?insn, ?index, ?prev).

NextNonDomPredecessorToSameBB(?insn, ?pred, ?nextPred) :-
   NextNonDomPredecessorIndexToSameBB(?insn, ?pred, ?indexNext),
   Instruction_Method(?insn, ?method),
   OptInstructionFromMethodIndex(?method, ?indexNext, ?nextPred).

PreviousNonDomPredecessorToSameBB(?insn, ?nextPred, ?prevPred) :-
   NextNonDomPredecessorToSameBB(?insn, ?prevPred, ?nextPred).

ExistsPreviousNonDomPredecessorToSameBB(?pred, ?insn) :-
   NextNonDomPredecessorToSameBB(?insn, _, ?pred).

.output OptInstructionFromMethodIndex
.output Instruction_Next
.output Instruction_Prev
.output JumpTarget
.output IsJumpTarget
.output ExceptionHandlerFirstInstruction
.output FallThrough
.output BasicBlockBegin
.output BasicBlockHead
.output BasicBlockTail
.output BasicBlockEnd
.output UnconditionalControlTransfer
.output MaySuccessorModuloThrow
.output MayPredecessorModuloThrow
.output MaySuccessorBBModuloThrow
.output MayPredecessorBBModuloThrow
.output Dominates
.output DominatesItsPredecessorInstruction
.output DominatesItsSuccessorInstruction
.output NextInSamePhiNode
.output PhiNodeHead
.output InstructionInPhiNode
.output NextReturn
.output NextInSameBasicBlock
.output PrevInSameBasicBlock
.output CFGRoot
.output ExistsMayPredecessorBBModuloThrow
.output DoesNotDominate
.output OptReturnInsn
.output HigherReturnIndex
.output NextReturnIndex
.output ExistsPreviousReturn
.output BBHeadInMethod
.output SameMethodBBHeads
.output PredecessorBBsToSameBB
.output LargerPredecessorIndexToSameBB
.output NextPredecessorIndexToSameBB
.output NextPredecessorToSameBB
.output PreviousPredecessorToSameB
.output ExistsPreviousPredecessorToSameBB
.output NonDomPredecessorBBsToSameBB
.output LargerNonDomPredecessorIndexToSameBB
.output NextNonDomPredecessorIndexToSameBB
.output NextNonDomPredecessorToSameBB
.output PreviousNonDomPredecessorToSameBB
.output ExistsPreviousNonDomPredecessorToSameBB
.output Method_FirstInstruction