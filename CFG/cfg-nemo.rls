@import Instruction_Method :- tsv{resource="Instruction_Method.csv",format=(string, string)} .
@import Instruction_Index :- tsv{resource="Instruction_Index.csv",format=(string, int)} .
@import AssignInstruction_To :- tsv{resource="AssignInstruction_To.csv",format=(string, string)} .
@import isReturnInstruction :- tsv{resource="isReturnInstruction.csv",format=(string)} .
@import isAssignLocal_Insn :- tsv{resource="isAssignLocal_Insn.csv",format=(string)} .
@import isThrow_Insn :- tsv{resource="isThrow_Insn.csv",format=(string)} .
@import isSwitch_Insn :- tsv{resource="isSwitch_Insn.csv",format=(string)} .
@import isGoto_Insn :- tsv{resource="isGoto_Insn.csv",format=(string)} .
@import ExceptionHandler_Method :- tsv{resource="ExceptionHandler_Method.csv",format=(string, string)} .
@import ExceptionHandler_Index :- tsv{resource="ExceptionHandler_Index.csv",format=(string, int)} .
@import Switch_Target :- tsv{resource="Switch_Target.csv",format=(string, int, int)} .
@import If_Target :- tsv{resource="If_Target.csv",format=(string, int)} .
@import Goto_Target :- tsv{resource="Goto_Target.csv",format=(string, int)} .
@import isInstruction :- tsv{resource="isInstruction.csv",format=(string)} .
@import isIf_Insn :- tsv{resource="isIf_Insn.csv",format=(string)} .
@import Switch_DefaultTarget :- tsv{resource="Switch_DefaultTarget.csv",format=(string, int)} .
@import Throw :- tsv{resource="Throw.facts",format=(string, int, string, string)} .
% CFG

Method_FirstInstruction(?method, ?insn) :-
   Instruction_Method(?insn, ?method),
   ~Instruction_Prev(?insn, _),
   ~IsJumpTarget(?insn),
   ~Throw(?insn, _, _, ?method).

OptInstructionFromMethodIndex(?method, ?index, ?insn) :-
   Instruction_Method(?insn, ?method),
   Instruction_Index(?insn, ?index).

Instruction_Next(?insn, ?next) :-
   Instruction_Method(?insn, ?inMethod),
   Instruction_Index(?insn, ?i),
   OptInstructionFromMethodIndex(?inMethod, ?i + 1, ?next).

Instruction_Prev(?insn, ?prev) :-
   Instruction_Method(?insn, ?inMethod),
   Instruction_Index(?insn, ?i),
   OptInstructionFromMethodIndex(?inMethod, ?i - 1, ?prev).

JumpTarget(?insn, ?goto) :-
   Goto_Target(?goto, ?targetIndex),
   Instruction_Method(?goto, ?gotoMethod),
   OptInstructionFromMethodIndex(?gotoMethod, ?targetIndex, ?insn).
JumpTarget(?insn, ?if) :-
   If_Target(?if, ?targetIndex),
   Instruction_Method(?if, ?method),
   OptInstructionFromMethodIndex(?method, ?targetIndex, ?insn).

JumpTarget(?insn, ?sw) :-
   Switch_Target(?sw, _, ?targetIndex),
   Instruction_Method(?sw, ?method),
   OptInstructionFromMethodIndex(?method, ?targetIndex, ?insn).

JumpTarget(?insn, ?sw) :-
   Switch_DefaultTarget(?sw, ?targetIndex),
   Instruction_Method(?sw, ?method),
   OptInstructionFromMethodIndex(?method, ?targetIndex, ?insn).

IsJumpTarget(?insn) :-
   JumpTarget(?insn, _).

ExceptionHandlerFirstInstruction(?insn) :-
   ExceptionHandler_Index(?handler, ?index),
   ExceptionHandler_Method(?handler, ?method),
   OptInstructionFromMethodIndex(?method, ?index, ?insn).

FallThrough(?insn) :-
   isIf_Insn(?if),
   Instruction_Next(?if, ?insn).
% REVIEW: The next two shouldn't matter much since without a label the
% fallthrough instruction would be dead code OR the beginning of an
% exception handler. The latter is handled specially. For the former, we
% consider such dead code to start a new BB, so that it doesn't accidentally
% get considered a continuation of the previous BB.
FallThrough(?insn) :-
   isReturnInstruction(?ret),
   Instruction_Next(?ret, ?insn).
FallThrough(?insn) :-
   isThrow_Insn(?throw),
   Instruction_Next(?throw, ?insn).


% First instruction of a method is a basic block beginning
BasicBlockBegin(?insn) :-
   OptInstructionFromMethodIndex(_, 1, ?insn).
BasicBlockBegin(?insn) :-
   ExceptionHandlerFirstInstruction(?insn).
BasicBlockBegin(?insn) :-
   JumpTarget(?insn, _).
BasicBlockBegin(?insn) :-
   FallThrough(?insn).

NextInSameBasicBlock(?insn, ?next) :-
   Instruction_Next(?insn, ?next),
   ~BasicBlockBegin(?next).

PrevInSameBasicBlock(?insn, ?prev) :-
   NextInSameBasicBlock(?prev, ?insn).

BasicBlockHead(?insn, ?insn) :-
   BasicBlockBegin(?insn).
BasicBlockHead(?insn, ?headInsn) :-
   BasicBlockHead(?prev, ?headInsn),
   NextInSameBasicBlock(?prev, ?insn).

BasicBlockTail(?headInsn, ?tailInsn) :-
   BasicBlockHead(?tailInsn, ?headInsn),
   ~NextInSameBasicBlock(?tailInsn, _).

BasicBlockEnd(?insn) :- BasicBlockTail(_, ?insn).

UnconditionalControlTransfer(?insn) :-
   isGoto_Insn(?insn).

UnconditionalControlTransfer(?insn) :-
   isSwitch_Insn(?insn).
UnconditionalControlTransfer(?insn) :-
   isReturnInstruction(?insn).
UnconditionalControlTransfer(?insn) :-
   isThrow_Insn(?insn).

MaySuccessorModuloThrow(?next, ?prev) :-
   JumpTarget(?next, ?prev).
MaySuccessorModuloThrow(?next, ?insn) :-
   Instruction_Next(?insn, ?next),
   ~UnconditionalControlTransfer(?insn).

MayPredecessorModuloThrow(?prev, ?next) :-
   MaySuccessorModuloThrow(?next, ?prev).

MaySuccessorBBModuloThrow(?next, ?prev) :-
   MaySuccessorModuloThrow(?next, ?prevEnd),
   BasicBlockEnd(?prevEnd),
   BasicBlockBegin(?next),
   BasicBlockHead(?prevEnd, ?prev).

MayPredecessorBBModuloThrow(?prev, ?next) :-
   MaySuccessorBBModuloThrow(?next, ?prev).

% The Dominates relation is defined on basic blocks,
% represented by their first instruction (head). Defining
% a dense quadratic relation, like Dominates, on individual
% instructions was hugely expensive.

% Dominates(?dominator, ?insn): To get to ?insn, we need to have gone
% through ?dominator
Dominates(?dominator, ?insn) :-
   SameMethodBBHeads(?dominator, ?insn),
   ~DoesNotDominate(?dominator, ?insn).

% Either the first instruction...
CFGRoot(?insn, ?method) :-
   OptInstructionFromMethodIndex(?method, 1, ?insn).

% or... could also be beginning of exception handler
CFGRoot(?insn, ?method) :-
   BBHeadInMethod(?insn, ?method),
   ~MayPredecessorBBModuloThrow(_, ?insn).

ExistsMayPredecessorBBModuloThrow(?insn) :-
   MayPredecessorBBModuloThrow(_, ?insn).

% DoesNotDominate(?dominatorCandidate, ?insn): ?insn (which is a
% basic block head) is NOT dominated by ?dominatorCandidate
DoesNotDominate(?dominatorCandidate, ?insn) :-
   BBHeadInMethod(?dominatorCandidate, ?method),
   CFGRoot(?insn, ?method),
   ?dominatorCandidate != ?insn.

DoesNotDominate(?dominatorCandidate, ?insn) :-
   DoesNotDominate(?dominatorCandidate, ?otherInsn),
   MaySuccessorBBModuloThrow(?insn, ?otherInsn),
   ?insn != ?dominatorCandidate.


% ?insn dominates its predecessor. ?insn must be the head of a basic
% block (head of a loop).
DominatesItsPredecessorInstruction(?prevInsn, ?insn) :-
   JumpTarget(?insn, ?prevInsn),
   BasicBlockHead(?prevInsn, ?prevInsnHead),
   ?insn = ?prevInsnHead.

DominatesItsPredecessorInstruction(?prevInsn, ?insn) :-
   JumpTarget(?insn, ?prevInsn),
   BasicBlockHead(?prevInsn, ?prevInsnHead),
    Dominates(?insn, ?prevInsnHead).

% KF: Currently this rules is not being used at all.
% % Includes the case of both being in the same basic block.
% DominatesItsSuccessorInstruction(?insn, ?prevInsn) :-
%    MaySuccessorModuloThrow(?insn, ?prevInsn),
%    BasicBlockHead[?prevInsn] = ?prevInsnHead,
%    BasicBlockHead[?insn] = ?insnHead,
%    (?insnHead = ?prevInsnHead;
%     Dominates(?prevInsnHead, ?insnHead)).


NextInSamePhiNode(?insn, ?nextInsn) :-
   isAssignLocal_Insn(?insn),
   AssignInstruction_To(?insn, ?var),
   Instruction_Next(?insn, ?nextInsn),
   isAssignLocal_Insn(?nextInsn),
   AssignInstruction_To(?nextInsn, ?var).

PhiNodeHead(?nextInsn, ?insn),
PhiNodeHead(?insn, ?insn) :-
   NextInSamePhiNode(?insn, ?nextInsn),
   Instruction_Prev(?insn, ?prevInsn),
   ~NextInSamePhiNode(?prevInsn, ?insn).

PhiNodeHead(?nextInsn, ?insn),
PhiNodeHead(?insn, ?insn) :-
   NextInSamePhiNode(?insn, ?nextInsn),
   ~Instruction_Prev(?insn, _).

PhiNodeHead(?nextInsn, ?headInsn) :-
   PhiNodeHead(?phiInsn, ?headInsn),
   NextInSamePhiNode(?phiInsn, ?nextInsn).

% Just inverting for efficiency.
InstructionInPhiNode(?insn, ?headInsn) :-
   PhiNodeHead(?insn, ?headInsn).


%/ auxiliary quick-and-dirty predicates
OptReturnInsn(?insn, ?method) :-
   isReturnInstruction(?insn),
   Instruction_Method(?insn, ?method).

HigherReturnIndex(?insn, ?indexHigher) :-
   OptReturnInsn(?insn, ?method),
   OptReturnInsn(?insnHigher, ?method),
   Instruction_Index(?insnHigher, ?indexHigher),
   Instruction_Index(?insn, ?index),
   ?index < ?indexHigher.


NextReturnIndex(?returnInsn, #min(?index)) :-
   isInstruction(?returnInsn), 
   HigherReturnIndex(?returnInsn, ?index).

NextReturn(?returnInsn, ?nextReturnInsn) :-
   NextReturnIndex(?returnInsn, ?nextReturnIndex),
   Instruction_Method(?returnInsn, ?meth),
   OptInstructionFromMethodIndex(?meth, ?nextReturnIndex, ?nextReturnInsn).

ExistsPreviousReturn(?insn) :-
   NextReturn(_, ?insn).

BBHeadInMethod(?insn, ?method) :-
   BasicBlockBegin(?insn),
   Instruction_Method(?insn, ?method).

SameMethodBBHeads(?insn1, ?insn2) :-
   BBHeadInMethod(?insn1, ?method),
   BBHeadInMethod(?insn2, ?method).

% Auxiliaries...

% Quadratic, but doesn't matter, since it's so local and only
% defined on basic blocks.
PredecessorBBsToSameBB(?insn, ?prev1, ?prev2) :-
   MayPredecessorBBModuloThrow(?prev1, ?insn),
   MayPredecessorBBModuloThrow(?prev2, ?insn),
   ?prev1 != ?prev2.

LargerPredecessorIndexToSameBB(?insn, ?indexLarge, ?prevSmall) :-
   PredecessorBBsToSameBB(?insn, ?prevLarge, ?prevSmall),
   Instruction_Index(?prevLarge, ?indexLarge),
   Instruction_Index(?prevSmall, ?indexSmall),
   ?indexLarge > ?indexSmall.

%NextPredecessorIndexToSameBB(?insn, ?prev, ?indexNext) :-
%   LargerPredecessorIndexToSameBB(?insn, _, ?prev),
%   ?indexNext = min ?index : LargerPredecessorIndexToSameBB(?insn, ?index, ?prev).

% may not return same result 
NextPredecessorIndexToSameBB(?insn, ?prev, #min(?index)) :-
   LargerPredecessorIndexToSameBB(?insn, _, ?prev),
   LargerPredecessorIndexToSameBB(?insn, ?index, ?prev).


NextPredecessorToSameBB(?insn, ?pred, ?nextPred) :-
   NextPredecessorIndexToSameBB(?insn, ?pred, ?indexNext),
   Instruction_Method(?insn, ?method),
   OptInstructionFromMethodIndex(?method, ?indexNext, ?nextPred).

PreviousPredecessorToSameB(?insn, ?nextPred, ?prevPred) :-
   NextPredecessorToSameBB(?insn, ?prevPred, ?nextPred).

ExistsPreviousPredecessorToSameBB(?pred, ?insn) :-
   NextPredecessorToSameBB(?insn, _, ?pred).


% Same concepts as above, but for non-dominated (shortened to "NonDom")
% predecessors
NonDomPredecessorBBsToSameBB(?insn, ?prev1, ?prev2) :-   
   MayPredecessorBBModuloThrow(?prev1, ?insn),
   MayPredecessorBBModuloThrow(?prev2, ?insn),
   BasicBlockTail(?prev1, ?prevTail1),
   BasicBlockTail(?prev2, ?prevTail2),
   ~DominatesItsPredecessorInstruction(?prevTail1, ?insn),
   ~DominatesItsPredecessorInstruction(?prevTail2, ?insn),
   ?prev1 != ?prev2.

LargerNonDomPredecessorIndexToSameBB(?insn, ?indexLarge, ?prevSmall) :-
   NonDomPredecessorBBsToSameBB(?insn, ?prevLarge, ?prevSmall),
   Instruction_Index(?prevLarge, ?indexLarge),
   Instruction_Index(?prevSmall, ?indexSmall),
   ?indexLarge > ?indexSmall.

NextNonDomPredecessorIndexToSameBB(?insn, ?prev, #min(?index)) :-
   LargerNonDomPredecessorIndexToSameBB(?insn, _, ?prev),
   LargerNonDomPredecessorIndexToSameBB(?insn, ?index, ?prev).

NextNonDomPredecessorToSameBB(?insn, ?pred, ?nextPred) :-
   NextNonDomPredecessorIndexToSameBB(?insn, ?pred, ?indexNext),
   Instruction_Method(?insn, ?method),
   OptInstructionFromMethodIndex(?method, ?indexNext, ?nextPred).

PreviousNonDomPredecessorToSameBB(?insn, ?nextPred, ?prevPred) :-
   NextNonDomPredecessorToSameBB(?insn, ?prevPred, ?nextPred).

ExistsPreviousNonDomPredecessorToSameBB(?pred, ?insn) :-
   NextNonDomPredecessorToSameBB(?insn, _, ?pred).


@export OptInstructionFromMethodIndex :- tsv{resource="OptInstructionFromMethodIndex.tsv",format=(string, int, string)} .

@export Instruction_Next :- tsv{resource="Instruction_Next.tsv",format=(string, string)} .

@export Instruction_Prev :- tsv{resource="Instruction_Prev.tsv",format=(string, string)} .

@export JumpTarget :- tsv{resource="JumpTarget.tsv",format=(string, string)} .

@export IsJumpTarget :- tsv{resource="IsJumpTarget.tsv",format=(string)} .

@export ExceptionHandlerFirstInstruction :- tsv{resource="ExceptionHandlerFirstInstruction.tsv",format=(string)} .

@export FallThrough :- tsv{resource="FallThrough.tsv",format=(string)} .

@export BasicBlockBegin :- tsv{resource="BasicBlockBegin.tsv",format=(string)} .

@export BasicBlockHead :- tsv{resource="BasicBlockHead.tsv",format=(string, string)} .

@export BasicBlockTail :- tsv{resource="BasicBlockTail.tsv",format=(string, string)} .

@export BasicBlockEnd :- tsv{resource="BasicBlockEnd.tsv",format=(string)} .

@export UnconditionalControlTransfer :- tsv{resource="UnconditionalControlTransfer.tsv",format=(string)} .

@export MaySuccessorModuloThrow :- tsv{resource="MaySuccessorModuloThrow.tsv",format=(string, string)} .

@export MayPredecessorModuloThrow :- tsv{resource="MayPredecessorModuloThrow.tsv",format=(string, string)} .

@export MaySuccessorBBModuloThrow :- tsv{resource="MaySuccessorBBModuloThrow.tsv",format=(string, string)} .

@export MayPredecessorBBModuloThrow :- tsv{resource="MayPredecessorBBModuloThrow.tsv",format=(string, string)} .

@export Dominates :- tsv{resource="Dominates.tsv",format=(string, string)} .

@export DominatesItsPredecessorInstruction :- tsv{resource="DominatesItsPredecessorInstruction.tsv",format=(string, string)} .

@export DominatesItsSuccessorInstruction :- tsv{resource="DominatesItsSuccessorInstruction.tsv",format=(string, string)} .

@export NextInSamePhiNode :- tsv{resource="NextInSamePhiNode.tsv",format=(string, string)} .

@export PhiNodeHead :- tsv{resource="PhiNodeHead.tsv",format=(string, string)} .

@export InstructionInPhiNode :- tsv{resource="InstructionInPhiNode.tsv",format=(string, string)} .

@export NextReturn :- tsv{resource="NextReturn.tsv",format=(string, string)} .

@export NextInSameBasicBlock :- tsv{resource="NextInSameBasicBlock.tsv",format=(string, string)} .

@export PrevInSameBasicBlock :- tsv{resource="PrevInSameBasicBlock.tsv",format=(string, string)} .

@export CFGRoot :- tsv{resource="CFGRoot.tsv",format=(string, string)} .

@export ExistsMayPredecessorBBModuloThrow :- tsv{resource="ExistsMayPredecessorBBModuloThrow.tsv",format=(string)} .

@export DoesNotDominate :- tsv{resource="DoesNotDominate.tsv",format=(string, string)} .

@export OptReturnInsn :- tsv{resource="OptReturnInsn.tsv",format=(string, string)} .

@export HigherReturnIndex :- tsv{resource="HigherReturnIndex.tsv",format=(string, int)} .

@export NextReturnIndex :- tsv{resource="NextReturnIndex.tsv",format=(string, int)} .

@export ExistsPreviousReturn :- tsv{resource="ExistsPreviousReturn.tsv",format=(string)} .

@export BBHeadInMethod :- tsv{resource="BBHeadInMethod.tsv",format=(string, string)} .

@export SameMethodBBHeads :- tsv{resource="SameMethodBBHeads.tsv",format=(string, string)} .

@export PredecessorBBsToSameBB :- tsv{resource="PredecessorBBsToSameBB.tsv",format=(string, string, string)} .

@export LargerPredecessorIndexToSameBB :- tsv{resource="LargerPredecessorIndexToSameBB.tsv",format=(string, int, string)} .

@export NextPredecessorIndexToSameBB :- tsv{resource="NextPredecessorIndexToSameBB.tsv",format=(string, string, int)} .

@export NextPredecessorToSameBB :- tsv{resource="NextPredecessorToSameBB.tsv",format=(string, string, string)} .

@export PreviousPredecessorToSameB :- tsv{resource="PreviousPredecessorToSameB.tsv",format=(string, string, string)} .

@export ExistsPreviousPredecessorToSameBB :- tsv{resource="ExistsPreviousPredecessorToSameBB.tsv",format=(string, string)} .

@export NonDomPredecessorBBsToSameBB :- tsv{resource="NonDomPredecessorBBsToSameBB.tsv",format=(string, string, string) } .

@export LargerNonDomPredecessorIndexToSameBB :- tsv{resource="LargerNonDomPredecessorIndexToSameBB.tsv",format=(string, int, string)} .

@export NextNonDomPredecessorIndexToSameBB :- tsv{resource="NextNonDomPredecessorIndexToSameBB.tsv",format=(string, string, int)} .

@export NextNonDomPredecessorToSameBB :- tsv{resource="NextNonDomPredecessorToSameBB.tsv",format=(string, string, string)} .

@export PreviousNonDomPredecessorToSameBB :- tsv{resource="PreviousNonDomPredecessorToSameBB.tsv",format=(string, string, string) } .

@export ExistsPreviousNonDomPredecessorToSameBB :- tsv{resource="ExistsPreviousNonDomPredecessorToSameBB.tsv",format=(string, string)} .

@export Method_FirstInstruction :- tsv{resource="Method_FirstInstruction.tsv",format=(string,string)}.