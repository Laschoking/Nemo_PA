@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
true("true"^^xsd:boolean).

% Current State: we manually import 2 files (MainClass, Method_Descriptor) because on nemo main string concatenation is not yet working
% to use this analysis it is necessary to first run the souffle analysis and then specify the two following file paths to the souffle results:
@import Method_Descriptor :- tsv{resource="/home/kotname/Documents/Diplom/Code/doop/master/DiffAnalysis/Method_Descriptor.tsv",format=(string, string)}.
@import MainClass :- tsv{resource="MainClass.facts",format=(string)}. %facts file is not modified, csv file comes from souffle

@import ClassModifier :- tsv{resource="ClassModifier.facts",format=(string, string)}.
@import DirectSuperclass :- tsv{resource="DirectSuperclass.facts",format=(string, string)}.
@import DirectSuperinterface :- tsv{resource="DirectSuperinterface.facts",format=(string, string)}.
@import Method_Modifier :- tsv{resource="Method-Modifier.facts",format=(string, string)}.
@import FormalParam :- tsv{resource="FormalParam.facts",format=(int, string,string)}.
@import Var_Type :- tsv{resource="Var-Type.facts",format=(string, string)}.
@import ComponentType :- tsv{resource="ComponentType.facts",format=(string, string)}.
@import AssignReturnValue :- tsv{resource="AssignReturnValue.facts",format=(string, string)}.
@import ActualParam :- tsv{resource="ActualParam.facts",format=(int,string, string)}.
@import ClassType :- tsv{resource="ClassType.facts",format=(string)}.
@import z_ArrayType :- tsv{resource="ArrayType.facts",format=(string)}.
@import z_InterfaceType :- tsv{resource="InterfaceType.facts",format=(string)}.
@import z_Var_DeclaringMethod :- tsv{resource="Var-DeclaringMethod.facts",format=(string, string)}.
@import z_ApplicationClass :- tsv{resource="ApplicationClass.facts",format=(string)}.
@import z_ThisVar :- tsv{resource="ThisVar.facts",format=(string, string)}.
@import z_NormalHeap :- tsv{resource="NormalHeap.facts",format=(string, string)}.
@import z_StringConstant :- tsv{resource="StringConstant.facts",format=(string)}.
@import z_AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.facts",format=(string, int, string,string, string,int)}.
@import z_AssignLocal :- tsv{resource="AssignLocal.facts",format=(string, int, string,string, string)}.
@import z_AssignCast :- tsv{resource="AssignCast.facts",format=(string, int, string,string, string,string)}.
@import z_Field :- tsv{resource="Field.facts",format=(string, string,string, string)}.
@import z_StaticMethodInvocation :- tsv{resource="StaticMethodInvocation.facts",format=(string,int, string, string)}.
@import z_SpecialMethodInvocation :- tsv{resource="SpecialMethodInvocation.facts",format=(string,int, string,string, string)}.
@import z_VirtualMethodInvocation :- tsv{resource="VirtualMethodInvocation.facts",format=(string, int, string,string, string)}.
@import z_Method :- tsv{resource="Method.facts",format=(string, string,string, string,string, string,int)}.
@import z_StoreInstanceField :- tsv{resource="StoreInstanceField.facts",format=(string, int, string,string, string,string)}.
@import z_LoadInstanceField :- tsv{resource="LoadInstanceField.facts",format=(string, int, string, string, string, string)}.
@import z_StoreStaticField :- tsv{resource="StoreStaticField.facts",format=(string, int, string, string, string)}.
@import z_LoadStaticField :- tsv{resource="LoadStaticField.facts",format=(string, int, string, string, string)}.
@import z_StoreArrayIndex :- tsv{resource="StoreArrayIndex.facts",format=(string, int, string, string, string)}.
@import z_LoadArrayIndex :- tsv{resource="LoadArrayIndex.facts",format=(string, int, string, string, string)}.
@import z_Return :- tsv{resource="Return.facts",format=(string, int, string, string)}.


MainClass(?b):-
  ClassModifier(_,?b),
  MainClass(?a),
  true(CONTAINS(?a,?b)).



% imports
isType(?class):-
  ClassType(?class).

isReferenceType(?class):-
  ClassType(?class).

isClassType(?class):-
  ClassType(?class).

isType(?arrayType),
isReferenceType(?arrayType),
isArrayType(?arrayType):-
  z_ArrayType(?arrayType).

isType(?interface),
isReferenceType(?interface),
isInterfaceType(?interface):-
  z_InterfaceType(?interface).

Var_DeclaringMethod(?var, ?method):-
  z_Var_DeclaringMethod(?var, ?method).

isType(?type),
isReferenceType(?type),
ApplicationClass(?type):-
  z_ApplicationClass(?type).

ThisVar(?method, ?var):-
  z_ThisVar(?method, ?var).

isType(?type),
HeapAllocation_Type(?id, ?type):-
  z_NormalHeap(?id, ?type).

HeapAllocation_Type(?id, "java.lang.String"):-
  z_StringConstant(?id).

Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap):-
  z_AssignHeapAllocation(?instruction, _, ?heap, ?to, ?method, _).

Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to):-
  z_AssignLocal(?instruction, _, ?from, ?to, ?method).

Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to):-
  z_AssignCast(?instruction, _, ?from, ?to, ?type, ?method).

Field_DeclaringType(?signature, ?declaringType):-
  z_Field(?signature, ?declaringType, _, _).

MethodInvocation_Base(?invocation, ?base):-
  VirtualMethodInvocation_Base(?invocation, ?base).

MethodInvocation_Base(?invocation, ?base):-
  SpecialMethodInvocation_Base(?invocation, ?base).

Instruction_Method(?instruction, ?method),
isStaticMethodInvocation_Insn(?instruction),
MethodInvocation_Method(?instruction, ?signature):-
  z_StaticMethodInvocation(?instruction, _, ?signature, ?method).

Instruction_Method(?instruction, ?method),
SpecialMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature):-
  z_SpecialMethodInvocation(?instruction, _, ?signature, ?base, ?method).

Instruction_Method(?instruction, ?method),
isVirtualMethodInvocation_Insn(?instruction),
VirtualMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature):-
  z_VirtualMethodInvocation(?instruction, _, ?signature, ?base, ?method).

Method_SimpleName(?method, ?simplename),
Method_ParamTypes(?method, ?params),
Method_DeclaringType(?method, ?declaringType),
Method_ReturnType(?method, ?returnType):-
  z_Method(?method, ?simplename, ?params, ?declaringType, ?returnType, _, _).
  
% Method_Descriptor(?method, ?returnType ):-
%  Method_ReturnType(?method, ?returnType),
  %Method_ParamTypes(?method, ?params).
  %?descriptor = ?returnType .
  %cat(?returnType, cat("(", cat(?params, ")"))).

Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from):-
  z_StoreInstanceField(?instruction, _, ?from, ?base, ?signature, ?method).

Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to):-
  z_LoadInstanceField(?instruction, _, ?to, ?base, ?signature, ?method).

Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreStaticField_From(?instruction, ?from):-
  z_StoreStaticField(?instruction, _, ?from, ?signature, ?method).

Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadStaticField_To(?instruction, ?to):-
  z_LoadStaticField(?instruction, _, ?to, ?signature, ?method).

Instruction_Method(?instruction, ?method),
StoreArrayIndex_Base(?instruction, ?base),
StoreArrayIndex_From(?instruction, ?from):-
  z_StoreArrayIndex(?instruction, _, ?from, ?base, ?method).
Instruction_Method(?instruction, ?method),
LoadArrayIndex_Base(?instruction, ?base),
LoadArrayIndex_To(?instruction, ?to):-
  z_LoadArrayIndex(?instruction, _, ?to, ?base, ?method).

Instruction_Method(?instruction, ?method),
ReturnNonvoid_Var(?instruction, ?var):-
  z_Return(?instruction, _, ?var, ?method).

% fat schema population
LoadInstanceField(?base, ?sig, ?to, ?inmethod):-
  Instruction_Method(?insn, ?inmethod),
  LoadInstanceField_Base(?insn, ?base),
  FieldInstruction_Signature(?insn, ?sig),
  LoadInstanceField_To(?insn, ?to).

StoreInstanceField(?from, ?base, ?sig, ?inmethod):-
  Instruction_Method(?insn, ?inmethod),
  StoreInstanceField_From(?insn, ?from),
  StoreInstanceField_Base(?insn, ?base),
  FieldInstruction_Signature(?insn, ?sig).
LoadStaticField(?sig, ?to, ?inmethod):-
  Instruction_Method(?insn, ?inmethod),
  FieldInstruction_Signature(?insn, ?sig),
  LoadStaticField_To(?insn, ?to).

StoreStaticField(?from, ?sig, ?inmethod):-
  Instruction_Method(?insn, ?inmethod),
  StoreStaticField_From(?insn, ?from),
  FieldInstruction_Signature(?insn, ?sig).

LoadArrayIndex(?base, ?to, ?inmethod):-
  Instruction_Method(?insn, ?inmethod),
  LoadArrayIndex_Base(?insn, ?base),
  LoadArrayIndex_To(?insn, ?to).

StoreArrayIndex(?from, ?base, ?inmethod):-
  Instruction_Method(?insn, ?inmethod),
  StoreArrayIndex_From(?insn, ?from),
  StoreArrayIndex_Base(?insn, ?base).

AssignCast(?type, ?from, ?to, ?inmethod):-
  Instruction_Method(?insn, ?inmethod),
  AssignCast_From(?insn, ?from),
  AssignInstruction_To(?insn, ?to),
  AssignCast_Type(?insn, ?type).

AssignLocal(?from, ?to, ?inmethod):-
  AssignInstruction_To(?insn, ?to),
  Instruction_Method(?insn, ?inmethod),
  AssignLocal_From(?insn, ?from).

AssignHeapAllocation(?heap, ?to, ?inmethod):-
  Instruction_Method(?insn, ?inmethod),
  AssignHeapAllocation_Heap(?insn, ?heap),
  AssignInstruction_To(?insn, ?to).

ReturnVar(?var, ?method):-
  Instruction_Method(?insn, ?method),
  ReturnNonvoid_Var(?insn, ?var).

StaticMethodInvocation(?invocation, ?signature, ?inmethod):-
  isStaticMethodInvocation_Insn(?invocation),
  Instruction_Method(?invocation, ?inmethod),
  MethodInvocation_Method(?invocation, ?signature).

HeapAllocation_Type("<<main method array>>", "java.lang.String[]").


HeapAllocation_Type("<<main method array content>>","java.lang.String").

VirtualMethodInvocation_Descriptor(?invocation, ?descriptor),
VirtualMethodInvocation_SimpleName(?invocation, ?simplename):-
  isVirtualMethodInvocation_Insn(?invocation),
  MethodInvocation_Method(?invocation, ?signature),
  Method_SimpleName(?signature, ?simplename),
  Method_Descriptor(?signature, ?descriptor).

MethodLookup(?simplename, ?descriptor, ?type, ?method):-
  MethodImplemented(?simplename, ?descriptor, ?type, ?method).

MethodLookup(?simplename, ?descriptor, ?type, ?method):-
   DirectSuperinterface(?type, ?supertype),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method),
  ~ MethodImplemented(?simplename, ?descriptor, ?type, _).

MethodLookup(?simplename, ?descriptor, ?type, ?method):-
  DirectSuperclass(?type, ?supertype),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method),
  ~MethodImplemented(?simplename, ?descriptor, ?type, _).

MethodImplemented(?simplename, ?descriptor, ?type, ?method):-
  Method_SimpleName(?method, ?simplename),
  Method_Descriptor(?method, ?descriptor),
  Method_DeclaringType(?method, ?type),
  ~Method_Modifier("abstract", ?method).

DirectSubclass(?a, ?c):-
  DirectSuperclass(?a, ?c). % ok

Subclass(?c, ?a):-
  DirectSubclass(?a, ?c).

Subclass(?c, ?a):-
  Subclass(?b, ?a),
  DirectSubclass(?b, ?c).

Superclass(?c, ?a):-
  Subclass(?a, ?c).

Superinterface(?k, ?c):-
  DirectSuperinterface(?c, ?k).

Superinterface(?k, ?c):-
  DirectSuperinterface(?c, ?j),
  Superinterface(?k, ?j).

Superinterface(?k, ?c):-
  DirectSuperclass(?c, ?super),
  Superinterface(?k, ?super).

SupertypeOf(?s, ?t):-
  SubtypeOf(?t, ?s).

SubtypeOf(?s, ?s):-
  isClassType(?s).
  
SubtypeOf(?s, ?t):-
  Subclass(?t, ?s).

SubtypeOf(?s, ?t):-
  isClassType(?s),
  Superinterface(?t, ?s).

SubtypeOf(?s, ?t):-
  isInterfaceType(?s),
  isType(?t),
  ?t = "java.lang.Object".

SubtypeOf(?s, ?s):-
  isInterfaceType(?s).

SubtypeOf(?s, ?t):-
  isInterfaceType(?s),
  Superinterface(?t, ?s).

SubtypeOf(?s, ?t):-
  isArrayType(?s),
  isType(?t),
  ?t = "java.lang.Object".

SubtypeOf(?s, ?t):-
  ComponentType(?s, ?sc),
  ComponentType(?t, ?tc),
  isReferenceType(?sc),
  isReferenceType(?tc),
  SubtypeOf(?sc, ?tc).

SubtypeOf(?s, ?t):-
  isArrayType(?s),
  isInterfaceType(?t),
  isType(?t),
  ?t = "java.lang.Cloneable".

SubtypeOf(?s, ?t):-
  isArrayType(?s),
  isInterfaceType(?t),
  isType(?t),
  ?t = "java.io.Serializable".

SubtypeOf(?t, ?t):-
  isType(?t).
  
SubtypeOfDifferent(?s, ?t):-
    SubtypeOf(?s,?t),
    ?s != ?t.

SameMethod("<java.util.prefs.Base64: void main(java.lang.String[])>").
SameMethod("<sun.java2d.loops.GraphicsPrimitiveMgr: void main(java.lang.String[])>").
SameMethod("<sun.security.provider.PolicyParser: void main(java.lang.String[])>").

MainMethodDeclaration(?method):-
  MainClass(?type),
  Method_DeclaringType(?method, ?type),
  Method_SimpleName(?method, "main"),
  ~ SameMethod(?method),
  Method_Descriptor(?method, "void(java.lang.String[])"),
  Method_Modifier("public", ?method),
  Method_Modifier("static", ?method).

ClassInitializer(?type, ?method):-
   MethodImplemented("<clinit>", "void()", ?type, ?method).

InitializedClass(?superclass):-
   InitializedClass(?class),
   DirectSuperclass(?class, ?superclass).

InitializedClass(?superinterface):-
   InitializedClass(?classOrInterface),
   DirectSuperinterface(?classOrInterface, ?superinterface).

InitializedClass(?class):-
   MainMethodDeclaration(?method),
   Method_DeclaringType(?method, ?class).

InitializedClass(?class):-
   Reachable(?inmethod),
   AssignHeapAllocation(?heap, _, ?inmethod),
   HeapAllocation_Type(?heap, ?class).

InitializedClass(?class):-
   Reachable(?inmethod),
   Instruction_Method(?invocation, ?inmethod),
   isStaticMethodInvocation_Insn(?invocation),
   MethodInvocation_Method(?invocation, ?signature),
   Method_DeclaringType(?signature, ?class).

InitializedClass(?classOrInterface):-
   Reachable(?inmethod),
   StoreStaticField(_, ?signature, ?inmethod),
   Field_DeclaringType(?signature, ?classOrInterface).

InitializedClass(?classOrInterface):-
   Reachable(?inmethod),
   LoadStaticField(?signature, _, ?inmethod),
   Field_DeclaringType(?signature, ?classOrInterface).

Reachable(?clinit):-
   InitializedClass(?class),
   ClassInitializer(?class, ?clinit).

Assign(?actual, ?formal):-
  CallGraphEdge(?invocation, ?method),
  FormalParam(?index, ?method, ?formal),
  ActualParam(?index, ?invocation, ?actual).

Assign(?return, ?local):-
  CallGraphEdge(?invocation, ?method),
  ReturnVar(?return, ?method),
  AssignReturnValue(?invocation, ?local).

VarPointsTo(?heap, ?var):-
  AssignHeapAllocation(?heap, ?var, ?inMethod),
  Reachable(?inMethod).

VarPointsTo(?heap, ?to):-
  Assign(?from, ?to),
  VarPointsTo(?heap, ?from).

VarPointsTo(?heap, ?to):-
  Reachable(?inmethod),
  AssignLocal(?from, ?to, ?inmethod),
  VarPointsTo(?heap, ?from).
 
VarPointsTo(?heap, ?to):-
  Reachable(?method),
  AssignCast(?type, ?from, ?to, ?method),
  SupertypeOf(?type, ?heaptype),
  HeapAllocation_Type(?heap, ?heaptype),
  VarPointsTo(?heap, ?from).
 
ArrayIndexPointsTo(?baseheap, ?heap):-
  Reachable(?inmethod),
  StoreArrayIndex(?from, ?base, ?inmethod),
  VarPointsTo(?baseheap, ?base),
  VarPointsTo(?heap, ?from),
  HeapAllocation_Type(?heap, ?heaptype),
  HeapAllocation_Type(?baseheap, ?baseheaptype),
  ComponentType(?baseheaptype, ?componenttype),
  SupertypeOf(?componenttype, ?heaptype).

VarPointsTo(?heap, ?to):-
  Reachable(?inmethod),
  LoadArrayIndex(?base, ?to, ?inmethod),
  VarPointsTo(?baseheap, ?base),
  ArrayIndexPointsTo(?baseheap, ?heap),
  Var_Type(?to, ?type),
  HeapAllocation_Type(?baseheap, ?baseheaptype),
  ComponentType(?baseheaptype, ?basecomponenttype),
  SupertypeOf(?type, ?basecomponenttype).
 
VarPointsTo(?heap, ?to):-
  Reachable(?inmethod),
  LoadInstanceField(?base, ?signature, ?to, ?inmethod),
  VarPointsTo(?baseheap, ?base),
  InstanceFieldPointsTo(?heap, ?signature, ?baseheap).
 
InstanceFieldPointsTo(?heap, ?fld, ?baseheap):-
  Reachable(?inmethod),
  StoreInstanceField(?from, ?base, ?fld, ?inmethod),
  VarPointsTo(?heap, ?from),
  VarPointsTo(?baseheap, ?base).
 
VarPointsTo(?heap, ?to):-
  Reachable(?inmethod),
  LoadStaticField(?fld, ?to, ?inmethod),
  StaticFieldPointsTo(?heap, ?fld).
StaticFieldPointsTo(?heap, ?fld):-
  Reachable(?inmethod),
  StoreStaticField(?from, ?fld, ?inmethod),
  VarPointsTo(?heap, ?from).

VarPointsTo(?heap, ?this):-
  Reachable(?inMethod),
  Instruction_Method(?invocation, ?inMethod),
  VirtualMethodInvocation_Base(?invocation, ?base),
  VarPointsTo(?heap, ?base),
  HeapAllocation_Type(?heap, ?heaptype),
  VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
  VirtualMethodInvocation_Descriptor(?invocation, ?descriptor),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?toMethod),
  ThisVar(?toMethod, ?this).
 
Reachable(?toMethod),
CallGraphEdge(?invocation, ?toMethod):-
  Reachable(?inMethod),
  Instruction_Method(?invocation, ?inMethod),
  VirtualMethodInvocation_Base(?invocation, ?base),
  VarPointsTo(?heap, ?base),
  HeapAllocation_Type(?heap, ?heaptype),
  VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
  VirtualMethodInvocation_Descriptor(?invocation, ?descriptor),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?toMethod).
 
Reachable(?tomethod),
CallGraphEdge(?invocation, ?tomethod):-
  Reachable(?inmethod),
  StaticMethodInvocation(?invocation, ?tomethod, ?inmethod).

Reachable(?tomethod),
CallGraphEdge(?invocation, ?tomethod),
VarPointsTo(?heap, ?this):-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  SpecialMethodInvocation_Base(?invocation, ?base),
  VarPointsTo(?heap, ?base),
  MethodInvocation_Method(?invocation, ?tomethod),
  ThisVar(?tomethod, ?this).
 
Reachable(?method):-
  MainMethodDeclaration(?method).

@export Reachable :- tsv{resource="Reachable.tsv"}.
@export VarPointsTo :- tsv{resource="VarPointsTo.tsv"}.
@export CallGraphEdge :- tsv{resource="CallGraphEdge.tsv"}.
@export Assign :- tsv{resource="Assign.tsv"}.
@export MethodLookup :- tsv{resource="MethodLookup.tsv"}.
@export AssignReturnValue :- tsv{resource="AssignReturnValue.tsv"}.

@export isType :- tsv {resource="isType.tsv"}.
@export isReferenceType :- tsv{resource="isReferenceType.tsv"}.
@export isArrayType :- tsv{resource="isArrayType.tsv"}.
@export isClassType :- tsv{resource="isClassType.tsv"}.
@export isInterfaceType :- tsv{resource="isInterfaceType.tsv"}.
@export ApplicationClass :- tsv{resource="ApplicationClass.tsv"}.
@export Field_DeclaringType :- tsv{resource="Field_DeclaringType.tsv"}.
@export Method_DeclaringType :- tsv{resource="Method_DeclaringType.tsv"}.
@export Method_ReturnType :- tsv{resource="Method_ReturnType.tsv"}.
@export Method_SimpleName :- tsv{resource="Method_SimpleName.tsv"}.
@export Method_ParamTypes :- tsv{resource="Method_ParamTypes.tsv"}.
@export ThisVar :- tsv{resource="ThisVar.tsv"}.
@export Var_DeclaringMethod :- tsv{resource="Var_DeclaringMethod.tsv"}.
@export HeapAllocation_Type :- tsv{resource="HeapAllocation_Type.tsv"}.
@export Instruction_Method :- tsv{resource="Instruction_Method.tsv"}.
@export isVirtualMethodInvocation_Insn :- tsv{resource="isVirtualMethodInvocation_Insn.tsv"}.
@export isStaticMethodInvocation_Insn :- tsv{resource="isStaticMethodInvocation_Insn.tsv"}.
@export FieldInstruction_Signature :- tsv{resource="FieldInstruction_Signature.tsv"}.
@export LoadInstanceField_Base :- tsv{resource="LoadInstanceField_Base.tsv"}.
@export LoadInstanceField_To :- tsv{resource="LoadInstanceField_To.tsv"}.
@export StoreInstanceField_From :- tsv{resource="StoreInstanceField_From.tsv"}.
@export StoreInstanceField_Base :- tsv{resource="StoreInstanceField_Base.tsv"}.
@export LoadStaticField_To :- tsv{resource="LoadStaticField_To.tsv"}.
@export StoreStaticField_From :- tsv{resource="StoreStaticField_From.tsv"}.
@export LoadArrayIndex_Base :- tsv{resource="LoadArrayIndex_Base.tsv"}.
@export LoadArrayIndex_To :- tsv{resource="LoadArrayIndex_To.tsv"}.
@export StoreArrayIndex_From :- tsv{resource="StoreArrayIndex_From.tsv"}.
@export StoreArrayIndex_Base :- tsv{resource="StoreArrayIndex_Base.tsv"}.
@export AssignInstruction_To :- tsv{resource="AssignInstruction_To.tsv"}.
@export AssignCast_From :- tsv{resource="AssignCast_From.tsv"}.
@export AssignCast_Type :- tsv{resource="AssignCast_Type.tsv"}.
@export AssignLocal_From :- tsv{resource="AssignLocal_From.tsv"}.
@export AssignHeapAllocation_Heap :- tsv{resource="AssignHeapAllocation_Heap.tsv"}.
@export ReturnNonvoid_Var :- tsv{resource="ReturnNonvoid_Var.tsv"}.
@export MethodInvocation_Method :- tsv{resource="MethodInvocation_Method.tsv"}.
@export VirtualMethodInvocation_Base :- tsv{resource="VirtualMethodInvocation_Base.tsv"}.
@export VirtualMethodInvocation_SimpleName :- tsv{resource="VirtualMethodInvocation_SimpleName.tsv"}.
@export VirtualMethodInvocation_Descriptor :- tsv{resource="VirtualMethodInvocation_Descriptor.tsv"}.
@export SpecialMethodInvocation_Base :- tsv{resource="SpecialMethodInvocation_Base.tsv"}.
@export MethodInvocation_Base :- tsv{resource="MethodInvocation_Base.tsv"}.
@export Method_Descriptor :- tsv{resource="Method_Descriptor.tsv"}.
@export MethodImplemented :- tsv{resource="MethodImplemented.tsv"}.

@export DirectSubclass :- tsv{resource="DirectSubclass.tsv"}.
@export Subclass :- tsv{resource="Subclass.tsv"}.
@export DirectSuperclass :- tsv{resource="DirectSuperclass.tsv"}.
@export Superclass :- tsv{resource="Superclass.tsv"}.

@export Superinterface :- tsv{resource="Superinterface.tsv"}.
@export SubtypeOf :- tsv{resource="SubtypeOf.tsv"}.
@export SupertypeOf :- tsv{resource="SupertypeOf.tsv"}.
@export SubtypeOfDifferent :- tsv{resource="SubtypeOfDifferent.tsv"}.
@export MainMethodDeclaration :- tsv{resource="MainMethodDeclaration.tsv"}.
@export LoadInstanceField :- tsv{resource="LoadInstanceField.tsv"}.
@export StoreInstanceField :- tsv{resource="StoreInstanceField.tsv"}.
@export LoadStaticField :- tsv{resource="LoadStaticField.tsv"}.
@export StoreStaticField :- tsv{resource="StoreStaticField.tsv"}.
@export LoadArrayIndex :- tsv{resource="LoadArrayIndex.tsv"}.
@export StoreArrayIndex :- tsv{resource="StoreArrayIndex.tsv"}.
@export AssignCast :- tsv{resource="AssignCast.tsv"}.
@export AssignLocal :- tsv{resource="AssignLocal.tsv"}.
@export AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.tsv"}.
@export ReturnVar :- tsv{resource="ReturnVar.tsv"}.
@export StaticMethodInvocation :- tsv{resource="StaticMethodInvocation.tsv"}.
@export SameMethod :- tsv{resource="SameMethod.tsv"}.
@export ClassInitializer :- tsv{resource="ClassInitializer.tsv"}.
@export InitializedClass :- tsv{resource="InitializedClass.tsv"}.
@export MainClass :- tsv{resource="MainClass.tsv",format=(string)}.


@export MethodLookup :- tsv{resource="MethodLookup.tsv"}.
@export InstanceFieldPointsTo :- tsv{resource="InstanceFieldPointsTo.tsv"}.
