% Current State: we manually import 2 files (MainClass, Method_Descriptor) because on nemo main string concatenation is not yet working
% to use this analysis it is necessary to first run the souffle analysis and then specify the two following file paths to the souffle results:
@source Method_Descriptor[string, string] : load-tsv("/home/kotname/Documents/Diplom/Code/doop/master/DiffAnalysis/Method_Descriptor.tsv") .
@source MainClass[string] : load-tsv("/home/kotname/Documents/Diplom/Code/doop/master/DiffAnalysis/MainClass.tsv") . %%facts file is not modified, csv file comes from souffle



@declare Assign(string,string) .
@declare VarPointsTo(string,string) .
@declare InstanceFieldPointsTo(string,string, string) .
@declare StaticFieldPointsTo(string,string) .
@declare CallGraphEdge(string,string) .
@declare ArrayIndexPointsTo(string,string) .
@declare Reachable(string) .
@declare isType(string) .
@declare isReferenceType(string) .
@declare isArrayType(string) .
@declare isClassType(string) .
@declare isInterfaceType(string) .
@declare ApplicationClass(string) .
@declare Field_DeclaringType(string, string) .
@declare Method_DeclaringType(string, string) .
@declare Method_ReturnType(string, string) .
@declare Method_SimpleName(string, string) .
@declare Method_ParamTypes(string, string) .
@declare ThisVar(string, string) .
@declare Var_DeclaringMethod(string, string) .
@declare HeapAllocation_Type(string, string) .
@declare MainMethodArgArrayContent(string) .
@declare Instruction_Method(string, string) .
@declare isVirtualMethodInvocation_Insn(string) .
@declare isStaticMethodInvocation_Insn(string) .
@declare FieldInstruction_Signature(string, string) .
@declare LoadInstanceField_Base(string, string) .
@declare LoadInstanceField_To(string, string) .
@declare StoreInstanceField_From(string, string) .
@declare StoreInstanceField_Base(string, string) .
@declare LoadStaticField_To(string, string) .
@declare StoreStaticField_From(string, string) .
@declare LoadArrayIndex_Base(string, string) .
@declare LoadArrayIndex_To(string,string) .
@declare StoreArrayIndex_From(string, string) .
@declare StoreArrayIndex_Base(string, string) .
@declare AssignInstruction_To(string, string) .
@declare AssignCast_From(string, string) .
@declare AssignCast_Type(string, string) .
@declare AssignLocal_From(string, string) .
@declare AssignHeapAllocation_Heap(string, string) .
@declare ReturnNonvoid_Var(string, string) .
@declare MethodInvocation_Method(string, string) .
@declare VirtualMethodInvocation_Base(string, string) .
@declare VirtualMethodInvocation_SimpleName(string, string) .
@declare VirtualMethodInvocation_Descriptor(string, string) .
@declare SpecialMethodInvocation_Base(string, string) .
@declare MethodInvocation_Base(string, string) .



@source DirectSuperclass[string, string] : load-tsv("DirectSuperclass.facts") .
@source DirectSuperinterface[string, string] : load-tsv("DirectSuperinterface.facts") .
@source Method_Modifier[string, string] : load-tsv("Method-Modifier.facts") .
@source FormalParam[integer, string,string] : load-tsv("FormalParam.facts") .
@source Var_Type[string, string] : load-tsv("Var-Type.facts") .
@source ComponentType[string, string] : load-tsv("ComponentType.facts") .
@source AssignReturnValue[string, string] : load-tsv("AssignReturnValue.facts") .
@source ActualParam[integer,string, string] : load-tsv("ActualParam.facts") .
@source ClassType[string] : load-tsv("ClassType.facts") .
@source z_ArrayType[string] : load-tsv("ArrayType.facts") .
@source z_InterfaceType[string] : load-tsv("InterfaceType.facts") .
@source z_Var_DeclaringMethod[string, string] : load-tsv("Var-DeclaringMethod.facts") .
@source z_ApplicationClass[string] : load-tsv("ApplicationClass.facts") .
@source z_ThisVar[string, string] : load-tsv("ThisVar.facts") .
@source z_NormalHeap[string, string] : load-tsv("NormalHeap.facts") .
@source z_StringConstant[string] : load-tsv("StringConstant.facts") .
@source z_AssignHeapAllocation[string, integer, string,string, string,integer] : load-tsv("AssignHeapAllocation.facts") .
@source z_AssignLocal[string, integer, string,string, string] : load-tsv("AssignLocal.facts") .
@source z_AssignCast[string, integer, string,string, string,string] : load-tsv("AssignCast.facts") .
@source z_Field[string, string,string, string] : load-tsv("Field.facts") .
@source z_StaticMethodInvocation[string,integer, string, string] : load-tsv("StaticMethodInvocation.facts") .
@source z_SpecialMethodInvocation[string,integer, string,string, string] : load-tsv("SpecialMethodInvocation.facts") .
@source z_VirtualMethodInvocation[string, integer, string,string, string] : load-tsv("VirtualMethodInvocation.facts") .
@source z_Method[string, string,string, string,string, string,integer] : load-tsv("Method.facts") .
@source z_StoreInstanceField[string, integer, string,string, string,string] : load-tsv("StoreInstanceField.facts") .
@source z_LoadInstanceField[string, integer, string, string, string, string] : load-tsv("LoadInstanceField.facts") .
@source z_StoreStaticField[string, integer, string, string, string] : load-tsv("StoreStaticField.facts") .
@source z_LoadStaticField[string, integer, string, string, string] : load-tsv("LoadStaticField.facts") .
@source z_StoreArrayIndex[string, integer, string, string, string] : load-tsv("StoreArrayIndex.facts") .
@source z_LoadArrayIndex[string, integer, string, string, string] : load-tsv("LoadArrayIndex.facts") .
@source z_Return[string, integer, string, string] : load-tsv("Return.facts") .


@declare MethodLookup(string, string, string, string) .
@declare MethodImplemented(string, string, string, string) .
@declare DirectSubclass(string, string) .
@declare Subclass(string, string) .
@declare Superclass(string,string) .
@declare Superinterface(string, string) .
@declare SubtypeOf(string, string) .
@declare SupertypeOf(string, string) .
@declare SubtypeOfDifferent(string, string) .
@declare MainMethodDeclaration(string) .


% Fat schema
@declare LoadInstanceField(string, string, string, string)  .
@declare StoreInstanceField(string, string, string, string)  .
@declare LoadStaticField(string, string, string)  .
@declare StoreStaticField(string, string, string)  .
@declare LoadArrayIndex(string, string, string)  .
@declare StoreArrayIndex(string, string, string)  .
@declare AssignCast(string, string, string, string)  .
@declare AssignLocal(string, string, string)  .
@declare AssignHeapAllocation(string, string, string)  .
@declare ReturnVar(string, string)  .
@declare StaticMethodInvocation(string, string, string)  .



% imports
isType(?class):-
  ClassType(?class).

isReferenceType(?class):-
  ClassType(?class).

isClassType(?class) :-
  ClassType(?class).

isType(?arrayType),
isReferenceType(?arrayType),
isArrayType(?arrayType) :-
  z_ArrayType(?arrayType).

isType(?interface),
isReferenceType(?interface),
isInterfaceType(?interface) :-
  z_InterfaceType(?interface).

Var_DeclaringMethod(?var, ?method) :-
  z_Var_DeclaringMethod(?var, ?method).

isType(?type),
isReferenceType(?type),
ApplicationClass(?type) :-
  z_ApplicationClass(?type).

ThisVar(?method, ?var) :-
  z_ThisVar(?method, ?var).

isType(?type),
HeapAllocation_Type(?id, ?type) :-
  z_NormalHeap(?id, ?type).

HeapAllocation_Type(?id, "java.lang.String") :-
  z_StringConstant(?id).

Instruction_Method(?instruction, ?method),
AssignInstruction_To(?instruction, ?to),
AssignHeapAllocation_Heap(?instruction, ?heap) :-
  z_AssignHeapAllocation(?instruction, _, ?heap, ?to, ?method, _).

Instruction_Method(?instruction, ?method),
AssignLocal_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  z_AssignLocal(?instruction, _, ?from, ?to, ?method).

Instruction_Method(?instruction, ?method),
AssignCast_Type(?instruction, ?type),
AssignCast_From(?instruction, ?from),
AssignInstruction_To(?instruction, ?to) :-
  z_AssignCast(?instruction, _, ?from, ?to, ?type, ?method).

Field_DeclaringType(?signature, ?declaringType) :-
  z_Field(?signature, ?declaringType, _, _).

MethodInvocation_Base(?invocation, ?base) :-
  VirtualMethodInvocation_Base(?invocation, ?base).

MethodInvocation_Base(?invocation, ?base) :-
  SpecialMethodInvocation_Base(?invocation, ?base).

Instruction_Method(?instruction, ?method),
isStaticMethodInvocation_Insn(?instruction),
MethodInvocation_Method(?instruction, ?signature) :-
  z_StaticMethodInvocation(?instruction, _, ?signature, ?method).

Instruction_Method(?instruction, ?method),
SpecialMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature) :-
  z_SpecialMethodInvocation(?instruction, _, ?signature, ?base, ?method).

Instruction_Method(?instruction, ?method),
isVirtualMethodInvocation_Insn(?instruction),
VirtualMethodInvocation_Base(?instruction, ?base),
MethodInvocation_Method(?instruction, ?signature) :-
  z_VirtualMethodInvocation(?instruction, _, ?signature, ?base, ?method).

Method_SimpleName(?method, ?simplename),
Method_ParamTypes(?method, ?params),
Method_DeclaringType(?method, ?declaringType),
Method_ReturnType(?method, ?returnType) :-
  z_Method(?method, ?simplename, ?params, ?declaringType, ?returnType, _, _).
  
% Method_Descriptor(?method, ?returnType ) :-
%  Method_ReturnType(?method, ?returnType),
  %Method_ParamTypes(?method, ?params).
  %?descriptor = ?returnType .
  %cat(?returnType, cat("(", cat(?params, ")"))).

Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreInstanceField_Base(?instruction, ?base),
StoreInstanceField_From(?instruction, ?from) :-
  z_StoreInstanceField(?instruction, _, ?from, ?base, ?signature, ?method).

Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadInstanceField_Base(?instruction, ?base),
LoadInstanceField_To(?instruction, ?to) :-
  z_LoadInstanceField(?instruction, _, ?to, ?base, ?signature, ?method).

Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
StoreStaticField_From(?instruction, ?from) :-
  z_StoreStaticField(?instruction, _, ?from, ?signature, ?method).

Instruction_Method(?instruction, ?method),
FieldInstruction_Signature(?instruction, ?signature),
LoadStaticField_To(?instruction, ?to) :-
  z_LoadStaticField(?instruction, _, ?to, ?signature, ?method).

Instruction_Method(?instruction, ?method),
StoreArrayIndex_Base(?instruction, ?base),
StoreArrayIndex_From(?instruction, ?from) :-
  z_StoreArrayIndex(?instruction, _, ?from, ?base, ?method).
Instruction_Method(?instruction, ?method),
LoadArrayIndex_Base(?instruction, ?base),
LoadArrayIndex_To(?instruction, ?to) :-
  z_LoadArrayIndex(?instruction, _, ?to, ?base, ?method).

Instruction_Method(?instruction, ?method),
ReturnNonvoid_Var(?instruction, ?var) :-
  z_Return(?instruction, _, ?var, ?method).

% fat schema population
LoadInstanceField(?base, ?sig, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  LoadInstanceField_Base(?insn, ?base),
  FieldInstruction_Signature(?insn, ?sig),
  LoadInstanceField_To(?insn, ?to).

StoreInstanceField(?from, ?base, ?sig, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  StoreInstanceField_From(?insn, ?from),
  StoreInstanceField_Base(?insn, ?base),
  FieldInstruction_Signature(?insn, ?sig).
LoadStaticField(?sig, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  FieldInstruction_Signature(?insn, ?sig),
  LoadStaticField_To(?insn, ?to).

StoreStaticField(?from, ?sig, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  StoreStaticField_From(?insn, ?from),
  FieldInstruction_Signature(?insn, ?sig).

LoadArrayIndex(?base, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  LoadArrayIndex_Base(?insn, ?base),
  LoadArrayIndex_To(?insn, ?to).

StoreArrayIndex(?from, ?base, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  StoreArrayIndex_From(?insn, ?from),
  StoreArrayIndex_Base(?insn, ?base).

AssignCast(?type, ?from, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  AssignCast_From(?insn, ?from),
  AssignInstruction_To(?insn, ?to),
  AssignCast_Type(?insn, ?type).

AssignLocal(?from, ?to, ?inmethod) :-
  AssignInstruction_To(?insn, ?to),
  Instruction_Method(?insn, ?inmethod),
  AssignLocal_From(?insn, ?from).

AssignHeapAllocation(?heap, ?to, ?inmethod) :-
  Instruction_Method(?insn, ?inmethod),
  AssignHeapAllocation_Heap(?insn, ?heap),
  AssignInstruction_To(?insn, ?to).

ReturnVar(?var, ?method) :-
  Instruction_Method(?insn, ?method),
  ReturnNonvoid_Var(?insn, ?var).

StaticMethodInvocation(?invocation, ?signature, ?inmethod) :-
  isStaticMethodInvocation_Insn(?invocation),
  Instruction_Method(?invocation, ?inmethod),
  MethodInvocation_Method(?invocation, ?signature).

HeapAllocation_Type("<<main method array>>", "java.lang.String[]").


HeapAllocation_Type("<<main method array content>>","java.lang.String").

VirtualMethodInvocation_Descriptor(?invocation, ?descriptor),
VirtualMethodInvocation_SimpleName(?invocation, ?simplename):-
  isVirtualMethodInvocation_Insn(?invocation),
  MethodInvocation_Method(?invocation, ?signature),
  Method_SimpleName(?signature, ?simplename),
  Method_Descriptor(?signature, ?descriptor).

MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
  MethodImplemented(?simplename, ?descriptor, ?type, ?method).

MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
   DirectSuperinterface(?type, ?supertype),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method),
  ~ MethodImplemented(?simplename, ?descriptor, ?type, _).

MethodLookup(?simplename, ?descriptor, ?type, ?method) :-
  DirectSuperclass(?type, ?supertype),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method),
  ~MethodImplemented(?simplename, ?descriptor, ?type, _).

MethodImplemented(?simplename, ?descriptor, ?type, ?method) :-
  Method_SimpleName(?method, ?simplename),
  Method_Descriptor(?method, ?descriptor),
  Method_DeclaringType(?method, ?type),
  ~Method_Modifier("abstract", ?method).

DirectSubclass(?a, ?c) :-
  DirectSuperclass(?a, ?c). % ok

Subclass(?c, ?a) :-
  DirectSubclass(?a, ?c).

Subclass(?c, ?a) :-
  Subclass(?b, ?a),
  DirectSubclass(?b, ?c).

Superclass(?c, ?a) :-
  Subclass(?a, ?c).

Superinterface(?k, ?c) :-
  DirectSuperinterface(?c, ?k).

Superinterface(?k, ?c) :-
  DirectSuperinterface(?c, ?j),
  Superinterface(?k, ?j).

Superinterface(?k, ?c) :-
  DirectSuperclass(?c, ?super),
  Superinterface(?k, ?super).

SupertypeOf(?s, ?t) :-
  SubtypeOf(?t, ?s).

SubtypeOf(?s, ?s) :-
  isClassType(?s).
  
SubtypeOf(?s, ?t) :-
  Subclass(?t, ?s).

SubtypeOf(?s, ?t) :-
  isClassType(?s),
  Superinterface(?t, ?s).

SubtypeOf(?s, ?t) :-
  isInterfaceType(?s),
  isType(?t),
  ?t = "java.lang.Object".

SubtypeOf(?s, ?s) :-
  isInterfaceType(?s).

SubtypeOf(?s, ?t) :-
  isInterfaceType(?s),
  Superinterface(?t, ?s).

SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isType(?t),
  ?t = "java.lang.Object".

SubtypeOf(?s, ?t) :-
  ComponentType(?s, ?sc),
  ComponentType(?t, ?tc),
  isReferenceType(?sc),
  isReferenceType(?tc),
  SubtypeOf(?sc, ?tc).

SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isInterfaceType(?t),
  isType(?t),
  ?t = "java.lang.Cloneable".

SubtypeOf(?s, ?t) :-
  isArrayType(?s),
  isInterfaceType(?t),
  isType(?t),
  ?t = "java.io.Serializable".

SubtypeOf(?t, ?t) :-
  isType(?t).
  
SubtypeOfDifferent(?s, ?t) :-
    SubtypeOf(?s,?t),
    ?s != ?t.

SameMethod("<java.util.prefs.Base64: void main(java.lang.String[])>").
SameMethod("<sun.java2d.loops.GraphicsPrimitiveMgr: void main(java.lang.String[])>").
SameMethod("<sun.security.provider.PolicyParser: void main(java.lang.String[])>").

MainMethodDeclaration(?method) :-
  MainClass(?type),
  Method_DeclaringType(?method, ?type),
  Method_SimpleName(?method, "main"),
  ~ SameMethod(?method),
  Method_Descriptor(?method, "void(java.lang.String[])"),
  Method_Modifier("public", ?method),
  Method_Modifier("static", ?method).
@declare ClassInitializer(string,string) .
@declare InitializedClass(string) .

ClassInitializer(?type, ?method) :-
   MethodImplemented("<clinit>", "void()", ?type, ?method).

InitializedClass(?superclass) :-
   InitializedClass(?class),
   DirectSuperclass(?class, ?superclass).

InitializedClass(?superinterface) :-
   InitializedClass(?classOrInterface),
   DirectSuperinterface(?classOrInterface, ?superinterface).

InitializedClass(?class) :-
   MainMethodDeclaration(?method),
   Method_DeclaringType(?method, ?class).

InitializedClass(?class) :-
   Reachable(?inmethod),
   AssignHeapAllocation(?heap, _, ?inmethod),
   HeapAllocation_Type(?heap, ?class).

InitializedClass(?class) :-
   Reachable(?inmethod),
   Instruction_Method(?invocation, ?inmethod),
   isStaticMethodInvocation_Insn(?invocation),
   MethodInvocation_Method(?invocation, ?signature),
   Method_DeclaringType(?signature, ?class).

InitializedClass(?classOrInterface) :-
   Reachable(?inmethod),
   StoreStaticField(_, ?signature, ?inmethod),
   Field_DeclaringType(?signature, ?classOrInterface).

InitializedClass(?classOrInterface) :-
   Reachable(?inmethod),
   LoadStaticField(?signature, _, ?inmethod),
   Field_DeclaringType(?signature, ?classOrInterface).

Reachable(?clinit) :-
   InitializedClass(?class),
   ClassInitializer(?class, ?clinit).





Assign(?actual, ?formal) :-
  CallGraphEdge(?invocation, ?method),
  FormalParam(?index, ?method, ?formal),
  ActualParam(?index, ?invocation, ?actual).

Assign(?return, ?local) :-
  CallGraphEdge(?invocation, ?method),
  ReturnVar(?return, ?method),
  AssignReturnValue(?invocation, ?local).

VarPointsTo(?heap, ?var) :-
  AssignHeapAllocation(?heap, ?var, ?inMethod),
  Reachable(?inMethod).

VarPointsTo(?heap, ?to) :-
  Assign(?from, ?to),
  VarPointsTo(?heap, ?from).

VarPointsTo(?heap, ?to) :-
  Reachable(?inmethod),
  AssignLocal(?from, ?to, ?inmethod),
  VarPointsTo(?heap, ?from).
 
VarPointsTo(?heap, ?to) :-
  Reachable(?method),
  AssignCast(?type, ?from, ?to, ?method),
  SupertypeOf(?type, ?heaptype),
  HeapAllocation_Type(?heap, ?heaptype),
  VarPointsTo(?heap, ?from).
 
ArrayIndexPointsTo(?baseheap, ?heap) :-
  Reachable(?inmethod),
  StoreArrayIndex(?from, ?base, ?inmethod),
  VarPointsTo(?baseheap, ?base),
  VarPointsTo(?heap, ?from),
  HeapAllocation_Type(?heap, ?heaptype),
  HeapAllocation_Type(?baseheap, ?baseheaptype),
  ComponentType(?baseheaptype, ?componenttype),
  SupertypeOf(?componenttype, ?heaptype).

VarPointsTo(?heap, ?to) :-
  Reachable(?inmethod),
  LoadArrayIndex(?base, ?to, ?inmethod),
  VarPointsTo(?baseheap, ?base),
  ArrayIndexPointsTo(?baseheap, ?heap),
  Var_Type(?to, ?type),
  HeapAllocation_Type(?baseheap, ?baseheaptype),
  ComponentType(?baseheaptype, ?basecomponenttype),
  SupertypeOf(?type, ?basecomponenttype).
 
VarPointsTo(?heap, ?to) :-
  Reachable(?inmethod),
  LoadInstanceField(?base, ?signature, ?to, ?inmethod),
  VarPointsTo(?baseheap, ?base),
  InstanceFieldPointsTo(?heap, ?signature, ?baseheap).
 
InstanceFieldPointsTo(?heap, ?fld, ?baseheap) :-
  Reachable(?inmethod),
  StoreInstanceField(?from, ?base, ?fld, ?inmethod),
  VarPointsTo(?heap, ?from),
  VarPointsTo(?baseheap, ?base).
 
VarPointsTo(?heap, ?to) :-
  Reachable(?inmethod),
  LoadStaticField(?fld, ?to, ?inmethod),
  StaticFieldPointsTo(?heap, ?fld).
StaticFieldPointsTo(?heap, ?fld) :-
  Reachable(?inmethod),
  StoreStaticField(?from, ?fld, ?inmethod),
  VarPointsTo(?heap, ?from).

VarPointsTo(?heap, ?this) :-
  Reachable(?inMethod),
  Instruction_Method(?invocation, ?inMethod),
  VirtualMethodInvocation_Base(?invocation, ?base),
  VarPointsTo(?heap, ?base),
  HeapAllocation_Type(?heap, ?heaptype),
  VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
  VirtualMethodInvocation_Descriptor(?invocation, ?descriptor),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?toMethod),
  ThisVar(?toMethod, ?this).
 
Reachable(?toMethod),
CallGraphEdge(?invocation, ?toMethod) :-
  Reachable(?inMethod),
  Instruction_Method(?invocation, ?inMethod),
  VirtualMethodInvocation_Base(?invocation, ?base),
  VarPointsTo(?heap, ?base),
  HeapAllocation_Type(?heap, ?heaptype),
  VirtualMethodInvocation_SimpleName(?invocation, ?simplename),
  VirtualMethodInvocation_Descriptor(?invocation, ?descriptor),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?toMethod).
 
Reachable(?tomethod),
CallGraphEdge(?invocation, ?tomethod) :-
  Reachable(?inmethod),
  StaticMethodInvocation(?invocation, ?tomethod, ?inmethod).

Reachable(?tomethod),
CallGraphEdge(?invocation, ?tomethod),
VarPointsTo(?heap, ?this) :-
  Reachable(?inmethod),
  Instruction_Method(?invocation, ?inmethod),
  SpecialMethodInvocation_Base(?invocation, ?base),
  VarPointsTo(?heap, ?base),
  MethodInvocation_Method(?invocation, ?tomethod),
  ThisVar(?tomethod, ?this).
 
Reachable(?method) :-
  MainMethodDeclaration(?method).



@export Reachable[1] : tsv{resource="Reachable.tsv"}.
@export VarPointsTo[2] : tsv{resource="VarPointsTo.tsv"}.
@export CallGraphEdge[5] : tsv{resource="CallGraphEdge.tsv"}.
@export Assign[2] : tsv{resource="Assign.tsv"}.
@export MethodLookup[4] : tsv{resource="MethodLookup.tsv"}.
@export AssignReturnValue[2] : tsv{resource="AssignReturnValue.tsv"}.
@export InstanceFieldPointsTo[10]: tsv{resource="InstanceFieldPointsTo.tsv"}.

%@output isType .
%@output isReferenceType .
%@output isArrayType .
%@output isClassType .
%@output isInterfaceType .
%@output ApplicationClass .
%@output Field_DeclaringType .
%@output Method_DeclaringType .
%@output Method_ReturnType .
%@output Method_SimpleName .
%@output Method_ParamTypes .
%@output ThisVar .
%@output Var_DeclaringMethod .
%@output HeapAllocation_Type .
%@output MainMethodArgArrayContent .
%@output Instruction_Method .
%@output isVirtualMethodInvocation_Insn .
%@output isStaticMethodInvocation_Insn .
%@output FieldInstruction_Signature .
%@output LoadInstanceField_Base .
%@output LoadInstanceField_To .
%@output StoreInstanceField_From .
%@output StoreInstanceField_Base .
%@output LoadStaticField_To .
%@output StoreStaticField_From .
%@output LoadArrayIndex_Base .
%@output LoadArrayIndex_To .
%@output StoreArrayIndex_From .
%@output StoreArrayIndex_Base .
%@output AssignInstruction_To .
%@output AssignCast_From .
%@output AssignCast_Type .
%@output AssignLocal_From .
%@output AssignHeapAllocation_Heap .
%@output ReturnNonvoid_Var .
%@output MethodInvocation_Method .
%@output VirtualMethodInvocation_Base .
%@output VirtualMethodInvocation_SimpleName .
%@output VirtualMethodInvocation_Descriptor .
%@output SpecialMethodInvocation_Base .
%@output MethodInvocation_Base .
%@output Method_Descriptor .
%%@output MethodLookup .
%@output MethodImplemented .
%@output DirectSubclass .
%@output Subclass .
%@output Superclass .
%@output Superinterface .
%@output SubtypeOf .
%@output SupertypeOf .
%@output SubtypeOfDifferent .
%@output MainMethodDeclaration .
%@output LoadInstanceField .
%@output StoreInstanceField .
%@output LoadStaticField .
%@output StoreStaticField .
%@output LoadArrayIndex .
%@output StoreArrayIndex .
%@output AssignCast .
%@output AssignLocal .
%@output AssignHeapAllocation .
%@output ReturnVar .
%@output StaticMethodInvocation .
%@output SameMethod .
%@output ClassInitializer .
%@output InitializedClass .
%%@output Assign .
%%@output VarPointsTo .
%@output InstanceFieldPointsTo .
%@output StaticFieldPointsTo .
%%@output CallGraphEdge .
%@output ArrayIndexPointsTo .
%@output MainClass .
%%@output Reachable.



%@export isType[10] :tsv{resource="isType.tsv"} .
%@export isReferenceType[10] :tsv{resource="isReferenceType.tsv"} .
%@export isArrayType[10] :tsv{resource="isArrayType.tsv"} .
%@export isClassType[10] :tsv{resource="isClassType.tsv"} .
%@export isInterfaceType[10] :tsv{resource="isInterfaceType.tsv"} .
%@export ApplicationClass[10] :tsv{resource="ApplicationClass.tsv"} .
%@export Field_DeclaringType[10] :tsv{resource="Field_DeclaringType.tsv"} .
%@export Method_DeclaringType[10] :tsv{resource="Method_DeclaringType.tsv"} .
%@export Method_ReturnType[10] :tsv{resource="Method_ReturnType.tsv"} .
%@export Method_SimpleName[10] :tsv{resource="Method_SimpleName.tsv"} .
%@export Method_ParamTypes[10] :tsv{resource="Method_ParamTypes.tsv"} .
%@export ThisVar[10] :tsv{resource="ThisVar.tsv"} .
%@export Var_DeclaringMethod[10] :tsv{resource="Var_DeclaringMethod.tsv"} .
%@export HeapAllocation_Type[10] :tsv{resource="HeapAllocation_Type.tsv"} .
%@export MainMethodArgArrayContent[10] :tsv{resource="MainMethodArgArrayContent.tsv"} .
%@export Instruction_Method[10] :tsv{resource="Instruction_Method.tsv"} .
%@export isVirtualMethodInvocation_Insn[10] :tsv{resource="isVirtualMethodInvocation_Insn.tsv"} .
%@export isStaticMethodInvocation_Insn[10] :tsv{resource="isStaticMethodInvocation_Insn.tsv"} .
%@export FieldInstruction_Signature[10] :tsv{resource="FieldInstruction_Signature.tsv"} .
%@export LoadInstanceField_Base[10] :tsv{resource="LoadInstanceField_Base.tsv"} .
%@export LoadInstanceField_To[10] :tsv{resource="LoadInstanceField_To.tsv"} .
%@export StoreInstanceField_From[10] :tsv{resource="StoreInstanceField_From.tsv"} .
%@export StoreInstanceField_Base[10] :tsv{resource="StoreInstanceField_Base.tsv"} .
%@export LoadStaticField_To[10] :tsv{resource="LoadStaticField_To.tsv"} .
%@export StoreStaticField_From[10] :tsv{resource="StoreStaticField_From.tsv"} .
%@export LoadArrayIndex_Base[10] :tsv{resource="LoadArrayIndex_Base.tsv"} .
%@export LoadArrayIndex_To[10] :tsv{resource="LoadArrayIndex_To.tsv"} .
%@export StoreArrayIndex_From[10] :tsv{resource="StoreArrayIndex_From.tsv"} .
%@export StoreArrayIndex_Base[10] :tsv{resource="StoreArrayIndex_Base.tsv"} .
%@export AssignInstruction_To[10] :tsv{resource="AssignInstruction_To.tsv"} .
%@export AssignCast_From[10] :tsv{resource="AssignCast_From.tsv"} .
%@export AssignCast_Type[10] :tsv{resource="AssignCast_Type.tsv"} .
%@export AssignLocal_From[10] :tsv{resource="AssignLocal_From.tsv"} .
%@export AssignHeapAllocation_Heap[10] :tsv{resource="AssignHeapAllocation_Heap.tsv"} .
%@export ReturnNonvoid_Var[10] :tsv{resource="ReturnNonvoid_Var.tsv"} .
%@export MethodInvocation_Method[10] :tsv{resource="MethodInvocation_Method.tsv"} .
%@export VirtualMethodInvocation_Base[10] :tsv{resource="VirtualMethodInvocation_Base.tsv"} .
%@export VirtualMethodInvocation_SimpleName[10] :tsv{resource="VirtualMethodInvocation_SimpleName.tsv"} .
%@export VirtualMethodInvocation_Descriptor[10] :tsv{resource="VirtualMethodInvocation_Descriptor.tsv"} .
%@export SpecialMethodInvocation_Base[10] :tsv{resource="SpecialMethodInvocation_Base.tsv"} .
%@export MethodInvocation_Base[10] :tsv{resource="MethodInvocation_Base.tsv"} .
%@export Method_Descriptor[10] :tsv{resource="Method_Descriptor.tsv"} .
%@export SameSubtypeOf[10] :tsv{resource="SubtypeOf.tsv"} .
%@export MethodImplemented[10] :tsv{resource="MethodImplemented.tsv"} .
%@export DirectSubclass[10] :tsv{resource="DirectSubclass.tsv"} .
%@export DirectSuperclass[10] :tsv{resource="DirectSuperclass.tsv"} .
%@export Subclass[10] :tsv{resource="Subclass.tsv"} .
%@export Superclass[10] :tsv{resource="Superclass.tsv"} .
%@export Superinterface[10] :tsv{resource="Superinterface.tsv"} .
%@export SubtypeOf[10] :tsv{resource="SubtypeOf.tsv"} .
%@export SupertypeOf[10] :tsv{resource="SupertypeOf.tsv"} .
%@export SubtypeOfDifferent[10] :tsv{resource="SubtypeOfDifferent.tsv"} .
%@export MainMethodDeclaration[10] :tsv{resource="MainMethodDeclaration.tsv"} .
%@export LoadInstanceField[10] :tsv{resource="LoadInstanceField.tsv"} .
%@export StoreInstanceField[10] :tsv{resource="StoreInstanceField.tsv"} .
%@export LoadStaticField[10] :tsv{resource="LoadStaticField.tsv"} .
%@export StoreStaticField[10] :tsv{resource="StoreStaticField.tsv"} .
%@export LoadArrayIndex[10] :tsv{resource="LoadArrayIndex.tsv"} .
%@export StoreArrayIndex[10] :tsv{resource="StoreArrayIndex.tsv"} .
%@export AssignCast[10] :tsv{resource="AssignCast.tsv"} .
%@export AssignLocal[10] :tsv{resource="AssignLocal.tsv"} .
%@export AssignHeapAllocation[10] :tsv{resource="AssignHeapAllocation.tsv"} .
%@export ReturnVar[10] :tsv{resource="ReturnVar.tsv"} .
%@export StaticMethodInvocation[10] :tsv{resource="StaticMethodInvocation.tsv"} .
%@export SameMethod[10] :tsv{resource="SameMethod.tsv"} .
%@export ClassInitializer[10] :tsv{resource="ClassInitializer.tsv"} .
%@export InitializedClass[10] :tsv{resource="InitializedClass.tsv"} .
%@export MainClass[10] :tsv{resource="MainClass.tsv"} .
%@export MethodLookup[10] :tsv{resource="MethodLookup.tsv"} 