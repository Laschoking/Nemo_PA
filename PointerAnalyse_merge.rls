% Current State: needs manual adaption of file MainClass (since no substring stuff is possible)
% Import Method_Descriptor from self-contained.dl from souffle (bc. string concatenation does not work yet)
 
@import Method_Descriptor :- tsv{resource="/home/kotname/Documents/Diplom/Code/doop/master/DiffAnalysis/Method_Descriptor.tsv",format=(string, string)}.
@import DirectSuperclass :- tsv{resource="DirectSuperclass.facts",format=(string, string,int)}.
@import DirectSuperinterface :- tsv{resource="DirectSuperinterface.facts",format=(string, string,int)}.
@import MainClass :- tsv{resource="/home/kotname/Documents/Diplom/Code/doop/master/DiffAnalysis/MainClass.tsv",format=(string)}. 
@import Method_Modifier :- tsv{resource="Method-Modifier.facts",format=(string, string,int)}.
@import FormalParam :- tsv{resource="FormalParam.facts",format=(int, string,string,int)}.
@import Var_Type :- tsv{resource="Var-Type.facts",format=(string, string,int)}.
@import ComponentType :- tsv{resource="ComponentType.facts",format=(string, string,int)}.
@import AssignReturnValue :- tsv{resource="AssignReturnValue.facts",format=(string, string,int)}.
@import ActualParam :- tsv{resource="ActualParam.facts",format=(int,string, string,int)}.
@import ClassType :- tsv{resource="ClassType.facts",format=(string,int)}.
@import z_ArrayType :- tsv{resource="ArrayType.facts",format=(string,int)}.
@import z_InterfaceType :- tsv{resource="InterfaceType.facts",format=(string,int)}.
@import z_Var_DeclaringMethod :- tsv{resource="Var-DeclaringMethod.facts",format=(string, string,int)}.
@import z_ApplicationClass :- tsv{resource="ApplicationClass.facts",format=(string,int)}.
@import z_ThisVar :- tsv{resource="ThisVar.facts",format=(string, string,int)}.
@import z_NormalHeap :- tsv{resource="NormalHeap.facts",format=(string, string,int)}.
@import z_StringConstant :- tsv{resource="StringConstant.facts",format=(string,int)}.
@import z_AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.facts",format=(string, int, string,string, string,int,int)}.
@import z_AssignLocal :- tsv{resource="AssignLocal.facts",format=(string, int, string,string, string,int)}.
@import z_AssignCast :- tsv{resource="AssignCast.facts",format=(string, int, string,string, string,string,int)}.
@import z_Field :- tsv{resource="Field.facts",format=(string, string,string, string,int)}.
@import z_StaticMethodInvocation :- tsv{resource="StaticMethodInvocation.facts",format=(string,int, string, string,int)}.
@import z_SpecialMethodInvocation :- tsv{resource="SpecialMethodInvocation.facts",format=(string,int, string,string, string,int)}.
@import z_VirtualMethodInvocation :- tsv{resource="VirtualMethodInvocation.facts",format=(string, int, string,string, string,int)}.
@import z_Method :- tsv{resource="Method.facts",format=(string, string,string, string,string, string,int,int)}.
@import z_StoreInstanceField :- tsv{resource="StoreInstanceField.facts",format=(string, int, string,string, string,string,int)}.
@import z_LoadInstanceField :- tsv{resource="LoadInstanceField.facts",format=(string, int, string, string, string, string,int)}.
@import z_StoreStaticField :- tsv{resource="StoreStaticField.facts",format=(string, int, string, string, string,int)}.
@import z_LoadStaticField :- tsv{resource="LoadStaticField.facts",format=(string, int, string, string, string,int)}.
@import z_StoreArrayIndex :- tsv{resource="StoreArrayIndex.facts",format=(string, int, string, string, string,int)}.
@import z_LoadArrayIndex :- tsv{resource="LoadArrayIndex.facts",format=(string, int, string, string, string,int)}.
@import z_Return :- tsv{resource="Return.facts",format=(string, int, string, string,int)}.

% assume that no relations with more than 9 relations exist



A(1).A(10).C(1).C(2).C(3).C(4).C(5).C(6).C(7).C(8).C(9).

merge_strat(?n, ?a * ?m,?a):-
    A(?a),C(?n),C(?m),?m <= ?n.
merge_strat(?a,0,0):-
    C(?a).



% Fat schema

HeapAllocation_Type("<<main method array>>", "java.lang.String[]",0).


HeapAllocation_Type("<<main method array content>>", "java.lang.String",0).
MainMethodArgArrayContent("<<main method array content>>").


% imports
isType(?class,?side):-
  ClassType(?class,?side).

isReferenceType(?class,?side):-
  ClassType(?class,?side).

isClassType(?class,?side):-
  ClassType(?class,?side).

isType(?arrayType,?side),
isReferenceType(?arrayType,?side),
isArrayType(?arrayType,?side):-
  z_ArrayType(?arrayType,?side).

isType(?interface,?side),
isReferenceType(?interface,?side),
isInterfaceType(?interface,?side):-
  z_InterfaceType(?interface,?side).

Var_DeclaringMethod(?var, ?method,?side):-
  z_Var_DeclaringMethod(?var, ?method,?side).

isType(?type,?side),
isReferenceType(?type,?side),
ApplicationClass(?type,?side):-
  z_ApplicationClass(?type,?side).

ThisVar(?method, ?var,?side):-
  z_ThisVar(?method, ?var,?side).

isType1(?type,?side),
HeapAllocation_Type(?id, ?type,?side):-
  z_NormalHeap(?id, ?type,?side).

isType2(?type,0),
isType(?type,0):-
  isType1(?type,?side_1),
  isType1(?type,?side_2),
  ?side_1 != ?side_2.

isType(?type,0):-
  isType1(?type,?side_1),
  ~isType2(?type,_).


HeapAllocation_Type(?id, "java.lang.String",?side):-
  z_StringConstant(?id,?side).

Instruction_Method1(?instruction, ?method,?side),
AssignInstruction_To1(?instruction, ?to,?side),
AssignHeapAllocation_Heap1(?instruction, ?heap,?side):-
  z_AssignHeapAllocation(?instruction, _, ?heap, ?to, ?method, _,?side).

AssignHeapAllocation_Heap(?instruction, ?heap,0),
AssignHeapAllocation_Heap2(?instruction, ?heap,0):-
  AssignHeapAllocation_Heap1(?instruction, ?heap,?side_1),
  AssignHeapAllocation_Heap1(?instruction, ?heap,?side_2),
  ?side_1 != ?side_2.

AssignHeapAllocation_Heap(?instruction, ?heap,?side_1):-
  AssignHeapAllocation_Heap1(?instruction, ?heap,?side_1),
  ~AssignHeapAllocation_Heap2(?instruction, ?heap,_).


Instruction_Method1(?instruction, ?method,?side),
AssignLocal_From1(?instruction, ?from,?side),
AssignInstruction_To1(?instruction, ?to,?side):-
  z_AssignLocal(?instruction, _, ?from, ?to, ?method,?side).


AssignInstruction_To2(?instruction, ?to,0),
AssignInstruction_To(?instruction, ?to,0):-
  AssignInstruction_To1(?instruction, ?to,?side_1),
  AssignInstruction_To1(?instruction, ?to,?side_2),
  ?side_1 != ?side_2.

AssignInstruction_To(?instruction, ?to,?side_1):-
  AssignInstruction_To1(?instruction, ?to,?side_1),
  ~AssignInstruction_To2(?instruction, ?to,_).

AssignLocal_From(?instruction, ?from,0),
AssignLocal_From2(?instruction, ?from,0):-
  AssignLocal_From1(?instruction, ?from,?side_1),
  AssignLocal_From1(?instruction, ?from,?side_2),
  ?side_1 != ?side_2.

AssignLocal_From(?instruction, ?from,?side_1):-
  AssignLocal_From1(?instruction, ?from,?side_1),
  ~AssignLocal_From2(?instruction, ?from,_).

Instruction_Method1(?instruction, ?method,?side),
AssignCast_Type(?instruction, ?type,?side),
AssignCast_From(?instruction, ?from,?side),
AssignInstruction_To(?instruction, ?to,?side):-
  z_AssignCast(?instruction, _, ?from, ?to, ?type, ?method,?side).

Field_DeclaringType(?signature, ?declaringType,?side):-
  z_Field(?signature, ?declaringType, _, _,?side).

MethodInvocation_Base(?invocation, ?base,?side):-
  VirtualMethodInvocation_Base(?invocation, ?base,?side).

MethodInvocation_Base(?invocation, ?base,?side):-
  SpecialMethodInvocation_Base(?invocation, ?base,?side).

Instruction_Method1(?instruction, ?method,?side),
isStaticMethodInvocation_Insn(?instruction,?side),
MethodInvocation_Method2(?instruction, ?signature,?side):-
  z_StaticMethodInvocation(?instruction, _, ?signature, ?method,?side).

Instruction_Method1(?instruction, ?method,?side),
SpecialMethodInvocation_Base1(?instruction, ?base,?side),
MethodInvocation_Method2(?instruction, ?signature,?side):-
  z_SpecialMethodInvocation(?instruction, _, ?signature, ?base, ?method,?side).

SpecialMethodInvocation_Base(?instruction, ?base,0),
SpecialMethodInvocation_Base2(?instruction, ?base,0):-
  SpecialMethodInvocation_Base1(?instruction, ?base,?side_1),
  SpecialMethodInvocation_Base1(?instruction, ?base,?side_2),
  ?side_1 != ?side_2.

SpecialMethodInvocation_Base(?instruction, ?base,?side_1):-
  SpecialMethodInvocation_Base1(?instruction, ?base,?side_1),
  ~SpecialMethodInvocation_Base2(?instruction, ?base,_).


Instruction_Method1(?instruction, ?method,?side),
isVirtualMethodInvocation_Insn1(?instruction,?side),
VirtualMethodInvocation_Base1(?instruction, ?base,?side),
MethodInvocation_Method2(?instruction, ?signature,?side):-
  z_VirtualMethodInvocation(?instruction, _, ?signature, ?base, ?method,?side).


VirtualMethodInvocation_Base(?instruction,?base,0),
VirtualMethodInvocation_Base2(?instruction,?base,0):-
  VirtualMethodInvocation_Base1(?instruction,?base,?side_1),
  VirtualMethodInvocation_Base1(?instruction,?base,?side_2),
  ?side_1 != ?side_2.

VirtualMethodInvocation_Base(?instruction,?base,?side_1):-
  ~VirtualMethodInvocation_Base2(?instruction,?base,_),
  VirtualMethodInvocation_Base1(?instruction,?base,?side_1).

isVirtualMethodInvocation_Insn(?instruction,0),
isVirtualMethodInvocation_Insn2(?instruction,0):-
  isVirtualMethodInvocation_Insn1(?instruction,?side_1),
  isVirtualMethodInvocation_Insn1(?instruction,?side_2),
  ?side_1 != ?side_2.

isVirtualMethodInvocation_Insn(?instruction,?side_1):-
  ~isVirtualMethodInvocation_Insn2(?instruction,_),
  isVirtualMethodInvocation_Insn1(?instruction,?side_1).



MethodInvocation_Method(?instruction, ?signature,0),
MethodInvocation_Method1(?instruction, ?signature,0):-
  MethodInvocation_Method2(?instruction, ?signature,?side_1),
  MethodInvocation_Method2(?instruction, ?signature,?side_2),
  ?side_1 != ?side_2.


MethodInvocation_Method(?instruction, ?signature,?side_1):-
  ~MethodInvocation_Method1(?instruction, ?signature,_),
  MethodInvocation_Method2(?instruction, ?signature,?side_1).


Method_SimpleName(?method, ?simplename,?side),
Method_ParamTypes(?method, ?params,?side),
Method_DeclaringType(?method, ?declaringType,?side),
Method_ReturnType(?method, ?returnType,?side):-
  z_Method(?method, ?simplename, ?params, ?declaringType, ?returnType, _, _,?side).
  
Instruction_Method1(?instruction, ?method,?side),
FieldInstruction_Signature(?instruction, ?signature,?side),
StoreInstanceField_Base(?instruction, ?base,?side),
StoreInstanceField_From(?instruction, ?from,?side):-
  z_StoreInstanceField(?instruction, _, ?from, ?base, ?signature, ?method,?side).

Instruction_Method1(?instruction, ?method,?side),
FieldInstruction_Signature(?instruction, ?signature,?side),
LoadInstanceField_Base(?instruction, ?base,?side),
LoadInstanceField_To(?instruction, ?to,?side):-
  z_LoadInstanceField(?instruction, _, ?to, ?base, ?signature, ?method,?side).

Instruction_Method1(?instruction, ?method,?side),
FieldInstruction_Signature(?instruction, ?signature,?side),
StoreStaticField_From(?instruction, ?from,?side):-
  z_StoreStaticField(?instruction, _, ?from, ?signature, ?method,?side).

Instruction_Method1(?instruction, ?method,?side),
FieldInstruction_Signature(?instruction, ?signature,?side),
LoadStaticField_To(?instruction, ?to,?side):-
  z_LoadStaticField(?instruction, _, ?to, ?signature, ?method,?side).

Instruction_Method1(?instruction, ?method,?side),
StoreArrayIndex_Base(?instruction, ?base,?side),
StoreArrayIndex_From(?instruction, ?from,?side):-
  z_StoreArrayIndex(?instruction, _, ?from, ?base, ?method,?side).

Instruction_Method1(?instruction, ?method,?side),
LoadArrayIndex_Base1(?instruction, ?base,?side),
LoadArrayIndex_To1(?instruction, ?to,?side):-
  z_LoadArrayIndex(?instruction, _, ?to, ?base, ?method,?side).

LoadArrayIndex_Base(?instruction, ?base,0),
LoadArrayIndex_Base2(?instruction, ?base,0):-
  LoadArrayIndex_Base1(?instruction, ?base,?side_1),
  LoadArrayIndex_Base1(?instruction, ?base,?side_2),
  ?side_1 != ?side_2.

LoadArrayIndex_Base(?instruction, ?base,?side_1):-
  LoadArrayIndex_Base1(?instruction, ?base,?side_1),
  ~LoadArrayIndex_Base2(?instruction, ?base,_).

LoadArrayIndex_To2(?instruction, ?to,0),
LoadArrayIndex_To(?instruction, ?to,0):-
  LoadArrayIndex_To1(?instruction, ?to,?side_1),
  LoadArrayIndex_To1(?instruction, ?to,?side_2),
  ?side_1 != ?side_2.

LoadArrayIndex_To(?instruction, ?to,?side_1):-
  LoadArrayIndex_To1(?instruction, ?to,?side_1),
  ~LoadArrayIndex_To2(?instruction, ?to,_).


Instruction_Method1(?instruction, ?method,?side),
ReturnNonvoid_Var(?instruction, ?var,?side):-
  z_Return(?instruction, _, ?var, ?method,?side).

Instruction_Method(?instruction, ?method,0),
Instruction_Method2(?instruction, ?method,0):-
  Instruction_Method1(?instruction, ?method,?side_1),
  Instruction_Method1(?instruction, ?method,?side_2),
  ?side_1 != ?side_2.

Instruction_Method(?instruction, ?method,?side_1):-
  ~Instruction_Method2(?instruction, ?method,_),
  Instruction_Method1(?instruction, ?method,?side_1).




% fat schema population
LoadInstanceField(?base, ?sig, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  LoadInstanceField_Base(?insn, ?base,?side_2),
  FieldInstruction_Signature(?insn, ?sig,?side_3),
  LoadInstanceField_To(?insn, ?to,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).

StoreInstanceField(?from, ?base, ?sig, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  StoreInstanceField_From(?insn, ?from,?side_2),
  StoreInstanceField_Base(?insn, ?base,?side_3),
  FieldInstruction_Signature(?insn, ?sig,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).

LoadStaticField(?sig, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  FieldInstruction_Signature(?insn, ?sig,?side_2),
  LoadStaticField_To(?insn, ?to,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

StoreStaticField(?from, ?sig, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  StoreStaticField_From(?insn, ?from,?side_2),
  FieldInstruction_Signature(?insn, ?sig,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

LoadArrayIndex(?base, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  LoadArrayIndex_Base(?insn, ?base,?side_2),
  LoadArrayIndex_To(?insn, ?to,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

StoreArrayIndex(?from, ?base, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  StoreArrayIndex_From(?insn, ?from,?side_2),
  StoreArrayIndex_Base(?insn, ?base,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

AssignCast(?type, ?from, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  AssignCast_From(?insn, ?from,?side_2),
  AssignInstruction_To(?insn, ?to,?side_3),
  AssignCast_Type(?insn, ?type,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).

AssignLocal(?from, ?to, ?inmethod,?side):-
  AssignInstruction_To(?insn, ?to,?side_1),
  Instruction_Method(?insn, ?inmethod,?side_2),
  AssignLocal_From(?insn, ?from,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

AssignHeapAllocation(?heap, ?to, ?inmethod,?side):-
  Instruction_Method(?insn, ?inmethod,?side_1),
  AssignHeapAllocation_Heap(?insn, ?heap,?side_2),
  AssignInstruction_To(?insn, ?to,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

ReturnVar(?var, ?method,?side):-
  Instruction_Method(?insn, ?method,?side_1),
  ReturnNonvoid_Var(?insn, ?var,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

StaticMethodInvocation(?invocation, ?signature, ?inmethod,?side):-
  isStaticMethodInvocation_Insn(?invocation,?side_1),
  Instruction_Method(?invocation, ?inmethod,?side_2),
  MethodInvocation_Method(?invocation, ?signature,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


VirtualMethodInvocation_Descriptor(?invocation, ?descriptor,?side):-
  isVirtualMethodInvocation_Insn(?invocation,?side_1),
  MethodInvocation_Method(?invocation, ?signature,?side_2),
  Method_SimpleName(?signature, ?simplename,?side_3),
  Method_Descriptor(?signature, ?descriptor),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).



VirtualMethodInvocation_Descriptor(?invocation, ?descriptor,?side),
VirtualMethodInvocation_SimpleName(?invocation, ?simplename,?side):-
  isVirtualMethodInvocation_Insn(?invocation,?side_1),
  MethodInvocation_Method(?invocation, ?signature,?side_2),
  Method_SimpleName(?signature, ?simplename,?side_3),
  Method_Descriptor(?signature, ?descriptor),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).



MethodLookup(?simplename, ?descriptor, ?type, ?method,?side):-
  MethodImplemented(?simplename, ?descriptor, ?type, ?method,?side).

% TODO: observe
MethodLookup(?simplename, ?descriptor, ?type, ?method,?side):-
  DirectSuperinterface(?type, ?supertype,?side_1),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method,?side_2),
  ~ MethodImplemented(?simplename, ?descriptor, ?type, _,?side_1),
  ~ MethodImplemented(?simplename, ?descriptor, ?type, _,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


MethodLookup(?simplename, ?descriptor, ?type, ?method,?side):-
  DirectSuperclass(?type, ?supertype,?side_1),
  MethodLookup(?simplename, ?descriptor, ?supertype, ?method,?side_2),
  ~MethodImplemented(?simplename, ?descriptor, ?type, _, ?side_1),
  ~MethodImplemented(?simplename, ?descriptor, ?type, _, ?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

MethodImplemented(?simplename, ?descriptor, ?type, ?method,?side):-
  Method_SimpleName(?method, ?simplename,?side_1),
  Method_Descriptor(?method, ?descriptor),
  Method_DeclaringType(?method, ?type,?side_2),
  ~Method_Modifier("abstract", ?method,?side_1),
  %~Method_Modifier("abstract", ?method,?side_3),
  ?sum = ?side_1 + ?side_2 ,
  merge_strat(2,?sum,?side).

DirectSubclass(?a, ?c,?side):-
  DirectSuperclass(?a, ?c,?side).

Subclass(?c, ?a,?side):-
  DirectSubclass(?a, ?c,?side).

Subclass(?c, ?a,?side):-
  Subclass(?b, ?a,?side_1),
  DirectSubclass(?b, ?c,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

Superclass(?c, ?a,?side):-
  Subclass(?a, ?c,?side).
Superinterface(?k, ?c,?side):-
  DirectSuperinterface(?c, ?k,?side).

Superinterface(?k, ?c,?side):-
  DirectSuperinterface(?c, ?j,?side_1),
  Superinterface(?k, ?j,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

Superinterface(?k, ?c,?side):-
  DirectSuperclass(?c, ?super,?side_1),
  Superinterface(?k, ?super,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

SupertypeOf(?s, ?t,?side):-
  SubtypeOf(?t, ?s,?side).

SubtypeOf(?s, ?s,?side):-
  isClassType(?s,?side).
  
SubtypeOf(?s, ?t,?side):-
  Subclass(?t, ?s,?side).

SubtypeOf(?s, ?t,?side):-
  isClassType(?s,?side),
  Superinterface(?t, ?s,?side).

SubtypeOf(?s, ?t,?side):-
  isInterfaceType(?s,?side),
  isType(?t,?side),
  ?t = "java.lang.Object".

SubtypeOf(?s, ?s,?side):-
  isInterfaceType(?s,?side).

SubtypeOf(?s, ?t,?side):-
  isInterfaceType(?s,?side_1),
  Superinterface(?t, ?s,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


SubtypeOf(?s, ?t,?side):-
  isArrayType(?s,?side_1),
  isType(?t,?side_2),
  ?t = "java.lang.Object",
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


SubtypeOf(?s, ?t,?side):-
  ComponentType(?s, ?sc,?side_1),
  ComponentType(?t, ?tc,?side_2),
  isReferenceType(?sc,?side_3),
  isReferenceType(?tc,?side_4),
  SubtypeOf(?sc, ?tc,?side_5),
  ?sum = ?side_1 + ?side_2 +  ?side_3 +  ?side_4 +  ?side_5,
  merge_strat(5,?sum,?side).


SubtypeOf(?s, ?t,?side):-
  isArrayType(?s,?side_1),
  isInterfaceType(?t,?side_2),
  isType(?t,?side_3),
  ?t = "java.lang.Cloneable",
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


SubtypeOf(?s, ?t,?side):-
  isArrayType(?s,?side_1),
  isInterfaceType(?t,?side_2),
  isType(?t,?side_3),
  ?t = "java.io.Serializable",
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


SubtypeOf(?t, ?t,?side):-
  isType(?t,?side).
  
SameSubtypeOf(?s,?s,?side):-
  SubtypeOf(?s,?t,?side).

SameSubtypeOf(?t,?t,?side):-
  SubtypeOf(?s,?t,?side).

SubtypeOfDifferent(?s, ?t,?side):-
  ~SameSubtypeOf(?s,?t,?side),
  SubtypeOf(?s,?t,?side).


SameMethod("<java.util.prefs.Base64: void main(java.lang.String[])>",0).
SameMethod("<sun.java2d.loops.GraphicsPrimitiveMgr: void main(java.lang.String[])>",0).
SameMethod("<sun.security.provider.PolicyParser: void main(java.lang.String[])>",0).


MainMethodDeclaration(?method,?side):-
  MainClass(?type),
  Method_DeclaringType(?method, ?type,?side_1),
  Method_SimpleName(?method, "main",?side_2),
  Method_Descriptor(?method, "void(java.lang.String[])"),
  Method_Modifier("public", ?method,?side_3),
  Method_Modifier("static", ?method,?side_4),
  ~ SameMethod(?method,_),
  ?sum = ?side_1 + ?side_2  + ?side_3 + ?side_4 ,
  merge_strat(4,?sum,?side).




ClassInitializer(?type, ?method,?side):-
   MethodImplemented("<clinit>", "void()", ?type, ?method,?side).

InitializedClass(?superclass,?side):-
   InitializedClass(?class,?side_1),
   DirectSuperclass(?class, ?superclass,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).



InitializedClass(?superinterface,?side):-
   InitializedClass(?classOrInterface,?side_1),
   DirectSuperinterface(?classOrInterface, ?superinterface,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


InitializedClass(?class,?side):-
   MainMethodDeclaration(?method,?side_1),
   Method_DeclaringType(?method, ?class,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


InitializedClass1(?class,?side):-
   Reachable(?inmethod,?side_1),
   AssignHeapAllocation(?heap, _, ?inmethod,?side_2),
   HeapAllocation_Type(?heap, ?class,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

InitializedClass(?class,0),
InitializedClass2(?class,0):-
  InitializedClass1(?class,?side_1),
  InitializedClass1(?class,?side_2),
  ?side_1 != ?side_2.

InitializedClass(?class,?side_1):-
  InitializedClass1(?class,?side_1),
  ~InitializedClass2(?class,_).

InitializedClass(?class,?side):-
   Reachable(?inmethod,?side),
   Instruction_Method(?invocation, ?inmethod,?side_1),
   isStaticMethodInvocation_Insn(?invocation,?side_2),
   MethodInvocation_Method(?invocation, ?signature,?side_3),
   Method_DeclaringType(?signature, ?class,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).


%InitializedClass(?classOrInterface,?side):-
%   Reachable(?inmethod,?side_1),
%   StoreStaticField(_, ?signature, ?inmethod,?side_2),
%   Field_DeclaringType(?signature, ?classOrInterface,?side_3),
%  ?sum = ?side_1 + ?side_2 + ?side_3,
%  merge_strat(3,?sum,?side).
%
%
%InitializedClass(?classOrInterface,?side):-
%   Reachable(?inmethod,?side_1),
%   LoadStaticField(?signature, _, ?inmethod,?side_2),
%   Field_DeclaringType(?signature, ?classOrInterface, ?side_3),
%  ?sum = ?side_1 + ?side_2 + ?side_3,
%  merge_strat(3,?sum,?side).


%Reachable(?clinit,?side):-
%   InitializedClass(?class,?side_1),
%   ClassInitializer(?class, ?clinit,?side_2),
%  ?sum = ?side_1 + ?side_2,
%  merge_strat(2,?sum,?side).


Assign(?actual, ?formal,?side):-
  CallGraphEdge(?invocation, ?method,?side_1),
  FormalParam(?index, ?method, ?formal,?side_2),
  ActualParam(?index, ?invocation, ?actual,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


Assign(?return, ?local,?side):-
  CallGraphEdge(?invocation, ?method,?side_1),
  ReturnVar(?return, ?method,?side_2),
  AssignReturnValue(?invocation, ?local,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).


VarPointsTo(?heap, ?var,?side):-
  AssignHeapAllocation(?heap, ?var, ?inMethod,?side_1),
  Reachable(?inMethod,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


VarPointsTo(?heap, ?to,?side):-
  Assign(?from, ?to,?side_1),
  VarPointsTo(?heap, ?from,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).


VarPointsTo(?heap, ?to,?side):-
  Reachable(?inmethod,?side_1),
  AssignLocal(?from, ?to, ?inmethod,?side_2),
  VarPointsTo(?heap, ?from,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).

 
VarPointsTo(?heap, ?to,?side):-
  Reachable(?method,?side_1),
  AssignCast(?type, ?from, ?to, ?method,?side_2),
  SupertypeOf(?type, ?heaptype,?side_3),
  HeapAllocation_Type(?heap, ?heaptype,?side_4),
  VarPointsTo(?heap, ?from,?side_5),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5,
  merge_strat(5,?sum,?side).

 
ArrayIndexPointsTo(?baseheap, ?heap,?side):-
  Reachable(?inmethod,?side_1),
  StoreArrayIndex(?from, ?base, ?inmethod,?side_2),
  VarPointsTo(?baseheap, ?base,?side_3),
  VarPointsTo(?heap, ?from,?side_4),
  HeapAllocation_Type(?heap, ?heaptype,?side_5),
  HeapAllocation_Type(?baseheap, ?baseheaptype,?side_6),
  ComponentType(?baseheaptype, ?componenttype,?side_7),
  SupertypeOf(?componenttype, ?heaptype,?side_8),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 + ?side_7 + ?side_8,
  merge_strat(7,?sum,?side).


VarPointsTo(?heap, ?to,?side):-
  Reachable(?inmethod,?side_1),
  LoadArrayIndex(?base, ?to, ?inmethod,?side_2),
  VarPointsTo(?baseheap, ?base,?side_3),
  ArrayIndexPointsTo(?baseheap, ?heap,?side_4),
  Var_Type(?to, ?type,?side_5),
  HeapAllocation_Type(?baseheap, ?baseheaptype,?side_6),
  ComponentType(?baseheaptype, ?basecomponenttype,?side_7),
  SupertypeOf(?type, ?basecomponenttype,?side_8),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 + ?side_7 + ?side_8,
  merge_strat(8,?sum,?side).

VarPointsTo(?heap, ?to,?side):-
  Reachable(?inmethod,?side_1),
  LoadInstanceField(?base, ?signature, ?to, ?inmethod,?side_2),
  VarPointsTo(?baseheap, ?base,?side_3),
  InstanceFieldPointsTo(?heap, ?signature, ?baseheap,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 ,
  merge_strat(4,?sum,?side).
 
InstanceFieldPointsTo(?heap, ?fld, ?baseheap,?side):-
  Reachable(?inmethod,?side_1),
  StoreInstanceField(?from, ?base, ?fld, ?inmethod,?side_2),
  VarPointsTo(?heap, ?from,?side_3),
  VarPointsTo(?baseheap, ?base,?side_4),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4,
  merge_strat(4,?sum,?side).
 
VarPointsTo(?heap, ?to,?side):-
  Reachable(?inmethod,?side_1),
  LoadStaticField(?fld, ?to, ?inmethod,?side_2),
  StaticFieldPointsTo(?heap, ?fld,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).
  
StaticFieldPointsTo(?heap, ?fld,?side):-
  Reachable(?inmethod,?side_1),
  StoreStaticField(?from, ?fld, ?inmethod,?side_2),
  VarPointsTo(?heap, ?from,?side_3),
  ?sum = ?side_1 + ?side_2 + ?side_3,
  merge_strat(3,?sum,?side).
 

VarPointsTo(?heap, ?this,?side):-
  Reachable(?inMethod,?side_1),
  Instruction_Method(?invocation, ?inMethod,?side_2),
  VirtualMethodInvocation_Base(?invocation, ?base,?side_3),
  VarPointsTo(?heap, ?base,?side_4),
  HeapAllocation_Type(?heap, ?heaptype,?side_5),
  VirtualMethodInvocation_SimpleName(?invocation, ?simplename,?side_6),
  VirtualMethodInvocation_Descriptor(?invocation, ?descriptor,?side_7),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?toMethod,?side_8),
  ThisVar(?toMethod, ?this,?side_9),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 + ?side_7 + ?side_8 + ?side_9,
  merge_strat(9,?sum,?side).
 
Reachable(?toMethod,?side),
CallGraphEdge(?invocation, ?toMethod,?side):-
  Reachable(?inMethod,?side_1),
  Instruction_Method(?invocation, ?inMethod,?side_2),
  VirtualMethodInvocation_Base(?invocation, ?base,?side_3),
  VarPointsTo(?heap, ?base,?side_4),
  HeapAllocation_Type(?heap, ?heaptype,?side_5),
  VirtualMethodInvocation_SimpleName(?invocation, ?simplename,?side_6),
  VirtualMethodInvocation_Descriptor(?invocation, ?descriptor,?side_7),
  MethodLookup(?simplename, ?descriptor, ?heaptype, ?toMethod,?side_8),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 + ?side_7 + ?side_8,
  merge_strat(8,?sum,?side).
 
Reachable(?tomethod,?side),
CallGraphEdge(?invocation, ?tomethod,?side):-
  Reachable(?inmethod,?side_1),
  StaticMethodInvocation(?invocation, ?tomethod, ?inmethod,?side_2),
  ?sum = ?side_1 + ?side_2,
  merge_strat(2,?sum,?side).

Reachable(?tomethod,?side),
CallGraphEdge(?invocation, ?tomethod,?side),
VarPointsTo(?heap, ?this,?side):-
  Reachable(?inmethod,?side_1),
  Instruction_Method(?invocation, ?inmethod,?side_2),
  SpecialMethodInvocation_Base(?invocation, ?base,?side_3),
  VarPointsTo(?heap, ?base,?side_4),
  MethodInvocation_Method(?invocation, ?tomethod,?side_5),
  ThisVar(?tomethod, ?this,?side_6),
  ?sum = ?side_1 + ?side_2 + ?side_3 + ?side_4 + ?side_5 + ?side_6 ,
  merge_strat(6,?sum,?side).
 
Reachable(?method,?side):-
  MainMethodDeclaration(?method,?side).

@export Reachable :- tsv{resource="Reachable.tsv"}.
@export VarPointsTo :- tsv{resource="VarPointsTo.tsv"}.
@export CallGraphEdge :- tsv{resource="CallGraphEdge.tsv"}.
@export Assign :- tsv{resource="Assign.tsv"}.
@export MethodLookup :- tsv{resource="MethodLookup.tsv"}.
@export AssignReturnValue :- tsv{resource="AssignReturnValue.tsv"}.

@export isType :- tsv{resource="isType.tsv"}.
@export isReferenceType :- tsv{resource="isReferenceType.tsv"}.
@export isArrayType :- tsv{resource="isArrayType.tsv"}.
@export isClassType :- tsv{resource="isClassType.tsv"}.
@export isInterfaceType :- tsv{resource="isInterfaceType.tsv"}.
@export ApplicationClass :- tsv{resource="ApplicationClass.tsv"}.
@export Field_DeclaringType :- tsv{resource="Field_DeclaringType.tsv"}.
@export Method_DeclaringType :- tsv{resource="Method_DeclaringType.tsv"}.
@export Method_ReturnType :- tsv{resource="Method_ReturnType.tsv"}.
@export Method_SimpleName :- tsv{resource="Method_SimpleName.tsv"}.
@export Method_ParamTypes :- tsv{resource="Method_ParamTypes.tsv"}.
@export ThisVar :- tsv{resource="ThisVar.tsv"}.
@export Var_DeclaringMethod :- tsv{resource="Var_DeclaringMethod.tsv"}.
@export HeapAllocation_Type :- tsv{resource="HeapAllocation_Type.tsv"}.
@export MainMethodArgArrayContent :- tsv{resource="MainMethodArgArrayContent.tsv"}.
@export Instruction_Method :- tsv{resource="Instruction_Method.tsv"}.
@export isVirtualMethodInvocation_Insn :- tsv{resource="isVirtualMethodInvocation_Insn.tsv"}.
@export isStaticMethodInvocation_Insn :- tsv{resource="isStaticMethodInvocation_Insn.tsv"}.
@export FieldInstruction_Signature :- tsv{resource="FieldInstruction_Signature.tsv"}.
@export LoadInstanceField_Base :- tsv{resource="LoadInstanceField_Base.tsv"}.
@export LoadInstanceField_To :- tsv{resource="LoadInstanceField_To.tsv"}.
@export StoreInstanceField_From :- tsv{resource="StoreInstanceField_From.tsv"}.
@export StoreInstanceField_Base :- tsv{resource="StoreInstanceField_Base.tsv"}.
@export LoadStaticField_To :- tsv{resource="LoadStaticField_To.tsv"}.
@export StoreStaticField_From :- tsv{resource="StoreStaticField_From.tsv"}.
@export LoadArrayIndex_Base :- tsv{resource="LoadArrayIndex_Base.tsv"}.
@export LoadArrayIndex_To :- tsv{resource="LoadArrayIndex_To.tsv"}.
@export StoreArrayIndex_From :- tsv{resource="StoreArrayIndex_From.tsv"}.
@export StoreArrayIndex_Base :- tsv{resource="StoreArrayIndex_Base.tsv"}.
@export AssignInstruction_To :- tsv{resource="AssignInstruction_To.tsv"}.
@export AssignCast_From :- tsv{resource="AssignCast_From.tsv"}.
@export AssignCast_Type :- tsv{resource="AssignCast_Type.tsv"}.
@export AssignLocal_From :- tsv{resource="AssignLocal_From.tsv"}.
@export AssignHeapAllocation_Heap :- tsv{resource="AssignHeapAllocation_Heap.tsv"}.
@export ReturnNonvoid_Var :- tsv{resource="ReturnNonvoid_Var.tsv"}.
@export MethodInvocation_Method :- tsv{resource="MethodInvocation_Method.tsv"}.
@export VirtualMethodInvocation_Base :- tsv{resource="VirtualMethodInvocation_Base.tsv"}.
@export VirtualMethodInvocation_SimpleName :- tsv{resource="VirtualMethodInvocation_SimpleName.tsv"}.
@export VirtualMethodInvocation_Descriptor :- tsv{resource="VirtualMethodInvocation_Descriptor.tsv"}.
@export SpecialMethodInvocation_Base :- tsv{resource="SpecialMethodInvocation_Base.tsv"}.
@export MethodInvocation_Base :- tsv{resource="MethodInvocation_Base.tsv"}.
@export Method_Descriptor :- tsv{resource="Method_Descriptor.tsv"}.
@export MethodImplemented :- tsv{resource="MethodImplemented.tsv"}.

@export DirectSubclass :- tsv{resource="DirectSubclass.tsv"}.
@export Subclass :- tsv{resource="Subclass.tsv"}.
@export Superclass :- tsv{resource="Superclass.tsv"}.
@export DirectSuperclass :- tsv{resource="DirectSuperclass.tsv"}.

@export Superinterface :- tsv{resource="Superinterface.tsv"}.
@export SameSubtypeOf :- tsv{resource="SubtypeOf.tsv"}.
@export SubtypeOf :- tsv{resource="SubtypeOf.tsv"}.
@export SupertypeOf :- tsv{resource="SupertypeOf.tsv"}.
@export SubtypeOfDifferent :- tsv{resource="SubtypeOfDifferent.tsv"}.
@export MainMethodDeclaration :- tsv{resource="MainMethodDeclaration.tsv"}.
@export LoadInstanceField :- tsv{resource="LoadInstanceField.tsv"}.
@export StoreInstanceField :- tsv{resource="StoreInstanceField.tsv"}.
@export LoadStaticField :- tsv{resource="LoadStaticField.tsv"}.
@export StoreStaticField :- tsv{resource="StoreStaticField.tsv"}.
@export LoadArrayIndex :- tsv{resource="LoadArrayIndex.tsv"}.
@export StoreArrayIndex :- tsv{resource="StoreArrayIndex.tsv"}.
@export AssignCast :- tsv{resource="AssignCast.tsv"}.
@export AssignLocal :- tsv{resource="AssignLocal.tsv"}.
@export AssignHeapAllocation :- tsv{resource="AssignHeapAllocation.tsv"}.
@export ReturnVar :- tsv{resource="ReturnVar.tsv"}.
@export StaticMethodInvocation :- tsv{resource="StaticMethodInvocation.tsv"}.
@export SameMethod :- tsv{resource="SameMethod.tsv"}.
@export ClassInitializer :- tsv{resource="ClassInitializer.tsv"}.
@export InitializedClass :- tsv{resource="InitializedClass.tsv"}.


@export InstanceFieldPointsTo :- tsv{resource="InstanceFieldPointsTo.tsv"}.
@export StaticFieldPointsTo :- tsv{resource="StaticFieldPointsTo.tsv"}.

@export ArrayIndexPointsTo :- tsv{resource="ArrayIndexPointsTo.tsv"}.
@export MainClass :- tsv{resource="MainClass.tsv"}.

@export merge_strat :- tsv{resource="merge_strat.tsv"}.